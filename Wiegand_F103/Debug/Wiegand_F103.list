
Wiegand_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080019cc  080019cc  000119cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001a50  08001a50  00011a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001a54  08001a54  00011a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08001a58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000088  20000074  08001acc  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000fc  08001acc  000200fc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   000073f8  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000018ca  00000000  00000000  00027495  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000275b  00000000  00000000  00028d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000005c0  00000000  00000000  0002b4c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000748  00000000  00000000  0002ba80  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002dcf  00000000  00000000  0002c1c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002274  00000000  00000000  0002ef97  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003120b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001178  00000000  00000000  00031288  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080019b4 	.word	0x080019b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080019b4 	.word	0x080019b4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <HAL_InitTick+0x3c>)
{
 8000160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <HAL_InitTick+0x40>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 f88e 	bl	8000294 <HAL_SYSTICK_Config>
 8000178:	4604      	mov	r4, r0
 800017a:	b958      	cbnz	r0, 8000194 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017c:	2d0f      	cmp	r5, #15
 800017e:	d809      	bhi.n	8000194 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000180:	4602      	mov	r2, r0
 8000182:	4629      	mov	r1, r5
 8000184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000188:	f000 f842 	bl	8000210 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_InitTick+0x44>)
 800018e:	4620      	mov	r0, r4
 8000190:	601d      	str	r5, [r3, #0]
 8000192:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000194:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	20000000 	.word	0x20000000
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	20000004 	.word	0x20000004

080001a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
{
 80001a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	f043 0310 	orr.w	r3, r3, #16
 80001b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	f000 f81b 	bl	80001ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f000 fdae 	bl	8000d1c <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_IncTick+0x14>)
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200000b4 	.word	0x200000b4
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	200000b4 	.word	0x200000b4

080001ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001ec:	4a07      	ldr	r2, [pc, #28]	; (800020c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80001ee:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001f0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80001f2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001fa:	041b      	lsls	r3, r3, #16
 80001fc:	0c1b      	lsrs	r3, r3, #16
 80001fe:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000206:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000208:	60d3      	str	r3, [r2, #12]
 800020a:	4770      	bx	lr
 800020c:	e000ed00 	.word	0xe000ed00

08000210 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000210:	4b17      	ldr	r3, [pc, #92]	; (8000270 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000212:	b530      	push	{r4, r5, lr}
 8000214:	68dc      	ldr	r4, [r3, #12]
 8000216:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800021a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800021e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000220:	2b04      	cmp	r3, #4
 8000222:	bf28      	it	cs
 8000224:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000226:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000228:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800022c:	bf98      	it	ls
 800022e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000230:	fa05 f303 	lsl.w	r3, r5, r3
 8000234:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000238:	bf88      	it	hi
 800023a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	4019      	ands	r1, r3
 800023e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000240:	fa05 f404 	lsl.w	r4, r5, r4
 8000244:	3c01      	subs	r4, #1
 8000246:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000248:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024a:	ea42 0201 	orr.w	r2, r2, r1
 800024e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000252:	bfa9      	itett	ge
 8000254:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	4b06      	ldrlt	r3, [pc, #24]	; (8000274 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025a:	b2d2      	uxtbge	r2, r2
 800025c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000260:	bfbb      	ittet	lt
 8000262:	f000 000f 	andlt.w	r0, r0, #15
 8000266:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000268:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	541a      	strblt	r2, [r3, r0]
 800026e:	bd30      	pop	{r4, r5, pc}
 8000270:	e000ed00 	.word	0xe000ed00
 8000274:	e000ed14 	.word	0xe000ed14

08000278 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000278:	2800      	cmp	r0, #0
 800027a:	db08      	blt.n	800028e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800027c:	2301      	movs	r3, #1
 800027e:	0942      	lsrs	r2, r0, #5
 8000280:	f000 001f 	and.w	r0, r0, #31
 8000284:	fa03 f000 	lsl.w	r0, r3, r0
 8000288:	4b01      	ldr	r3, [pc, #4]	; (8000290 <HAL_NVIC_EnableIRQ+0x18>)
 800028a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800028e:	4770      	bx	lr
 8000290:	e000e100 	.word	0xe000e100

08000294 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000294:	3801      	subs	r0, #1
 8000296:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800029a:	d20a      	bcs.n	80002b2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800029e:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a0:	4a06      	ldr	r2, [pc, #24]	; (80002bc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002a2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002aa:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002ac:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002b2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e010 	.word	0xe000e010
 80002bc:	e000ed00 	.word	0xe000ed00

080002c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80002c4:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80002c6:	4626      	mov	r6, r4
 80002c8:	4b66      	ldr	r3, [pc, #408]	; (8000464 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002ca:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000474 <HAL_GPIO_Init+0x1b4>
 80002ce:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000478 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80002d2:	680a      	ldr	r2, [r1, #0]
 80002d4:	fa32 f506 	lsrs.w	r5, r2, r6
 80002d8:	d102      	bne.n	80002e0 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80002da:	b003      	add	sp, #12
 80002dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80002e0:	f04f 0801 	mov.w	r8, #1
 80002e4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002e8:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80002ec:	4590      	cmp	r8, r2
 80002ee:	d17f      	bne.n	80003f0 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 80002f0:	684d      	ldr	r5, [r1, #4]
 80002f2:	2d12      	cmp	r5, #18
 80002f4:	f000 80aa 	beq.w	800044c <HAL_GPIO_Init+0x18c>
 80002f8:	f200 8083 	bhi.w	8000402 <HAL_GPIO_Init+0x142>
 80002fc:	2d02      	cmp	r5, #2
 80002fe:	f000 80a2 	beq.w	8000446 <HAL_GPIO_Init+0x186>
 8000302:	d877      	bhi.n	80003f4 <HAL_GPIO_Init+0x134>
 8000304:	2d00      	cmp	r5, #0
 8000306:	f000 8089 	beq.w	800041c <HAL_GPIO_Init+0x15c>
 800030a:	2d01      	cmp	r5, #1
 800030c:	f000 8099 	beq.w	8000442 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000310:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000314:	2aff      	cmp	r2, #255	; 0xff
 8000316:	bf93      	iteet	ls
 8000318:	4682      	movls	sl, r0
 800031a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800031e:	3d08      	subhi	r5, #8
 8000320:	f8d0 b000 	ldrls.w	fp, [r0]
 8000324:	bf92      	itee	ls
 8000326:	00b5      	lslls	r5, r6, #2
 8000328:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800032c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800032e:	fa09 f805 	lsl.w	r8, r9, r5
 8000332:	ea2b 0808 	bic.w	r8, fp, r8
 8000336:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800033a:	bf88      	it	hi
 800033c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000340:	ea48 0505 	orr.w	r5, r8, r5
 8000344:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000348:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800034c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000350:	d04e      	beq.n	80003f0 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000352:	4d45      	ldr	r5, [pc, #276]	; (8000468 <HAL_GPIO_Init+0x1a8>)
 8000354:	4f44      	ldr	r7, [pc, #272]	; (8000468 <HAL_GPIO_Init+0x1a8>)
 8000356:	69ad      	ldr	r5, [r5, #24]
 8000358:	f026 0803 	bic.w	r8, r6, #3
 800035c:	f045 0501 	orr.w	r5, r5, #1
 8000360:	61bd      	str	r5, [r7, #24]
 8000362:	69bd      	ldr	r5, [r7, #24]
 8000364:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000368:	f005 0501 	and.w	r5, r5, #1
 800036c:	9501      	str	r5, [sp, #4]
 800036e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000372:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000376:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000378:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800037c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000380:	fa09 f90b 	lsl.w	r9, r9, fp
 8000384:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000388:	4d38      	ldr	r5, [pc, #224]	; (800046c <HAL_GPIO_Init+0x1ac>)
 800038a:	42a8      	cmp	r0, r5
 800038c:	d063      	beq.n	8000456 <HAL_GPIO_Init+0x196>
 800038e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000392:	42a8      	cmp	r0, r5
 8000394:	d061      	beq.n	800045a <HAL_GPIO_Init+0x19a>
 8000396:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800039a:	42a8      	cmp	r0, r5
 800039c:	d05f      	beq.n	800045e <HAL_GPIO_Init+0x19e>
 800039e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003a2:	42a8      	cmp	r0, r5
 80003a4:	bf0c      	ite	eq
 80003a6:	2503      	moveq	r5, #3
 80003a8:	2504      	movne	r5, #4
 80003aa:	fa05 f50b 	lsl.w	r5, r5, fp
 80003ae:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80003b2:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80003b6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003b8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003bc:	bf14      	ite	ne
 80003be:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003c0:	4395      	biceq	r5, r2
 80003c2:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80003c4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003c6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003ca:	bf14      	ite	ne
 80003cc:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003ce:	4395      	biceq	r5, r2
 80003d0:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80003d2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003d4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003d8:	bf14      	ite	ne
 80003da:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003dc:	4395      	biceq	r5, r2
 80003de:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80003e0:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003e2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003e6:	bf14      	ite	ne
 80003e8:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003ea:	ea25 0202 	biceq.w	r2, r5, r2
 80003ee:	60da      	str	r2, [r3, #12]
	position++;
 80003f0:	3601      	adds	r6, #1
 80003f2:	e76e      	b.n	80002d2 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80003f4:	2d03      	cmp	r5, #3
 80003f6:	d022      	beq.n	800043e <HAL_GPIO_Init+0x17e>
 80003f8:	2d11      	cmp	r5, #17
 80003fa:	d189      	bne.n	8000310 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003fc:	68cc      	ldr	r4, [r1, #12]
 80003fe:	3404      	adds	r4, #4
          break;
 8000400:	e786      	b.n	8000310 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000402:	4f1b      	ldr	r7, [pc, #108]	; (8000470 <HAL_GPIO_Init+0x1b0>)
 8000404:	42bd      	cmp	r5, r7
 8000406:	d009      	beq.n	800041c <HAL_GPIO_Init+0x15c>
 8000408:	d812      	bhi.n	8000430 <HAL_GPIO_Init+0x170>
 800040a:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800047c <HAL_GPIO_Init+0x1bc>
 800040e:	454d      	cmp	r5, r9
 8000410:	d004      	beq.n	800041c <HAL_GPIO_Init+0x15c>
 8000412:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000416:	454d      	cmp	r5, r9
 8000418:	f47f af7a 	bne.w	8000310 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800041c:	688c      	ldr	r4, [r1, #8]
 800041e:	b1c4      	cbz	r4, 8000452 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000420:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8000422:	bf0c      	ite	eq
 8000424:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000428:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800042c:	2408      	movs	r4, #8
 800042e:	e76f      	b.n	8000310 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000430:	4575      	cmp	r5, lr
 8000432:	d0f3      	beq.n	800041c <HAL_GPIO_Init+0x15c>
 8000434:	4565      	cmp	r5, ip
 8000436:	d0f1      	beq.n	800041c <HAL_GPIO_Init+0x15c>
 8000438:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000480 <HAL_GPIO_Init+0x1c0>
 800043c:	e7eb      	b.n	8000416 <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800043e:	2400      	movs	r4, #0
 8000440:	e766      	b.n	8000310 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000442:	68cc      	ldr	r4, [r1, #12]
          break;
 8000444:	e764      	b.n	8000310 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000446:	68cc      	ldr	r4, [r1, #12]
 8000448:	3408      	adds	r4, #8
          break;
 800044a:	e761      	b.n	8000310 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800044c:	68cc      	ldr	r4, [r1, #12]
 800044e:	340c      	adds	r4, #12
          break;
 8000450:	e75e      	b.n	8000310 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000452:	2404      	movs	r4, #4
 8000454:	e75c      	b.n	8000310 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000456:	2500      	movs	r5, #0
 8000458:	e7a7      	b.n	80003aa <HAL_GPIO_Init+0xea>
 800045a:	2501      	movs	r5, #1
 800045c:	e7a5      	b.n	80003aa <HAL_GPIO_Init+0xea>
 800045e:	2502      	movs	r5, #2
 8000460:	e7a3      	b.n	80003aa <HAL_GPIO_Init+0xea>
 8000462:	bf00      	nop
 8000464:	40010400 	.word	0x40010400
 8000468:	40021000 	.word	0x40021000
 800046c:	40010800 	.word	0x40010800
 8000470:	10210000 	.word	0x10210000
 8000474:	10310000 	.word	0x10310000
 8000478:	10320000 	.word	0x10320000
 800047c:	10110000 	.word	0x10110000
 8000480:	10220000 	.word	0x10220000

08000484 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000484:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000486:	4b04      	ldr	r3, [pc, #16]	; (8000498 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000488:	6959      	ldr	r1, [r3, #20]
 800048a:	4201      	tst	r1, r0
 800048c:	d002      	beq.n	8000494 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800048e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000490:	f000 fb88 	bl	8000ba4 <HAL_GPIO_EXTI_Callback>
 8000494:	bd08      	pop	{r3, pc}
 8000496:	bf00      	nop
 8000498:	40010400 	.word	0x40010400

0800049c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800049c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80004a0:	4605      	mov	r5, r0
 80004a2:	b908      	cbnz	r0, 80004a8 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80004a4:	2001      	movs	r0, #1
 80004a6:	e03c      	b.n	8000522 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004a8:	6803      	ldr	r3, [r0, #0]
 80004aa:	07db      	lsls	r3, r3, #31
 80004ac:	d410      	bmi.n	80004d0 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004ae:	682b      	ldr	r3, [r5, #0]
 80004b0:	079f      	lsls	r7, r3, #30
 80004b2:	d45d      	bmi.n	8000570 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004b4:	682b      	ldr	r3, [r5, #0]
 80004b6:	0719      	lsls	r1, r3, #28
 80004b8:	f100 8094 	bmi.w	80005e4 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004bc:	682b      	ldr	r3, [r5, #0]
 80004be:	075a      	lsls	r2, r3, #29
 80004c0:	f100 80be 	bmi.w	8000640 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004c4:	69e8      	ldr	r0, [r5, #28]
 80004c6:	2800      	cmp	r0, #0
 80004c8:	f040 812c 	bne.w	8000724 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80004cc:	2000      	movs	r0, #0
 80004ce:	e028      	b.n	8000522 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80004d0:	4c8f      	ldr	r4, [pc, #572]	; (8000710 <HAL_RCC_OscConfig+0x274>)
 80004d2:	6863      	ldr	r3, [r4, #4]
 80004d4:	f003 030c 	and.w	r3, r3, #12
 80004d8:	2b04      	cmp	r3, #4
 80004da:	d007      	beq.n	80004ec <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004dc:	6863      	ldr	r3, [r4, #4]
 80004de:	f003 030c 	and.w	r3, r3, #12
 80004e2:	2b08      	cmp	r3, #8
 80004e4:	d109      	bne.n	80004fa <HAL_RCC_OscConfig+0x5e>
 80004e6:	6863      	ldr	r3, [r4, #4]
 80004e8:	03de      	lsls	r6, r3, #15
 80004ea:	d506      	bpl.n	80004fa <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004ec:	6823      	ldr	r3, [r4, #0]
 80004ee:	039c      	lsls	r4, r3, #14
 80004f0:	d5dd      	bpl.n	80004ae <HAL_RCC_OscConfig+0x12>
 80004f2:	686b      	ldr	r3, [r5, #4]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d1da      	bne.n	80004ae <HAL_RCC_OscConfig+0x12>
 80004f8:	e7d4      	b.n	80004a4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004fa:	686b      	ldr	r3, [r5, #4]
 80004fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000500:	d112      	bne.n	8000528 <HAL_RCC_OscConfig+0x8c>
 8000502:	6823      	ldr	r3, [r4, #0]
 8000504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000508:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800050a:	f7ff fe69 	bl	80001e0 <HAL_GetTick>
 800050e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000510:	6823      	ldr	r3, [r4, #0]
 8000512:	0398      	lsls	r0, r3, #14
 8000514:	d4cb      	bmi.n	80004ae <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000516:	f7ff fe63 	bl	80001e0 <HAL_GetTick>
 800051a:	1b80      	subs	r0, r0, r6
 800051c:	2864      	cmp	r0, #100	; 0x64
 800051e:	d9f7      	bls.n	8000510 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000520:	2003      	movs	r0, #3
}
 8000522:	b002      	add	sp, #8
 8000524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000528:	b99b      	cbnz	r3, 8000552 <HAL_RCC_OscConfig+0xb6>
 800052a:	6823      	ldr	r3, [r4, #0]
 800052c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000530:	6023      	str	r3, [r4, #0]
 8000532:	6823      	ldr	r3, [r4, #0]
 8000534:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000538:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800053a:	f7ff fe51 	bl	80001e0 <HAL_GetTick>
 800053e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000540:	6823      	ldr	r3, [r4, #0]
 8000542:	0399      	lsls	r1, r3, #14
 8000544:	d5b3      	bpl.n	80004ae <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000546:	f7ff fe4b 	bl	80001e0 <HAL_GetTick>
 800054a:	1b80      	subs	r0, r0, r6
 800054c:	2864      	cmp	r0, #100	; 0x64
 800054e:	d9f7      	bls.n	8000540 <HAL_RCC_OscConfig+0xa4>
 8000550:	e7e6      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000552:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000556:	6823      	ldr	r3, [r4, #0]
 8000558:	d103      	bne.n	8000562 <HAL_RCC_OscConfig+0xc6>
 800055a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800055e:	6023      	str	r3, [r4, #0]
 8000560:	e7cf      	b.n	8000502 <HAL_RCC_OscConfig+0x66>
 8000562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000566:	6023      	str	r3, [r4, #0]
 8000568:	6823      	ldr	r3, [r4, #0]
 800056a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800056e:	e7cb      	b.n	8000508 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000570:	4c67      	ldr	r4, [pc, #412]	; (8000710 <HAL_RCC_OscConfig+0x274>)
 8000572:	6863      	ldr	r3, [r4, #4]
 8000574:	f013 0f0c 	tst.w	r3, #12
 8000578:	d007      	beq.n	800058a <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800057a:	6863      	ldr	r3, [r4, #4]
 800057c:	f003 030c 	and.w	r3, r3, #12
 8000580:	2b08      	cmp	r3, #8
 8000582:	d110      	bne.n	80005a6 <HAL_RCC_OscConfig+0x10a>
 8000584:	6863      	ldr	r3, [r4, #4]
 8000586:	03da      	lsls	r2, r3, #15
 8000588:	d40d      	bmi.n	80005a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800058a:	6823      	ldr	r3, [r4, #0]
 800058c:	079b      	lsls	r3, r3, #30
 800058e:	d502      	bpl.n	8000596 <HAL_RCC_OscConfig+0xfa>
 8000590:	692b      	ldr	r3, [r5, #16]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d186      	bne.n	80004a4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000596:	6823      	ldr	r3, [r4, #0]
 8000598:	696a      	ldr	r2, [r5, #20]
 800059a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800059e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80005a2:	6023      	str	r3, [r4, #0]
 80005a4:	e786      	b.n	80004b4 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005a6:	692a      	ldr	r2, [r5, #16]
 80005a8:	4b5a      	ldr	r3, [pc, #360]	; (8000714 <HAL_RCC_OscConfig+0x278>)
 80005aa:	b16a      	cbz	r2, 80005c8 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 80005ac:	2201      	movs	r2, #1
 80005ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005b0:	f7ff fe16 	bl	80001e0 <HAL_GetTick>
 80005b4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005b6:	6823      	ldr	r3, [r4, #0]
 80005b8:	079f      	lsls	r7, r3, #30
 80005ba:	d4ec      	bmi.n	8000596 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80005bc:	f7ff fe10 	bl	80001e0 <HAL_GetTick>
 80005c0:	1b80      	subs	r0, r0, r6
 80005c2:	2802      	cmp	r0, #2
 80005c4:	d9f7      	bls.n	80005b6 <HAL_RCC_OscConfig+0x11a>
 80005c6:	e7ab      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005ca:	f7ff fe09 	bl	80001e0 <HAL_GetTick>
 80005ce:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005d0:	6823      	ldr	r3, [r4, #0]
 80005d2:	0798      	lsls	r0, r3, #30
 80005d4:	f57f af6e 	bpl.w	80004b4 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80005d8:	f7ff fe02 	bl	80001e0 <HAL_GetTick>
 80005dc:	1b80      	subs	r0, r0, r6
 80005de:	2802      	cmp	r0, #2
 80005e0:	d9f6      	bls.n	80005d0 <HAL_RCC_OscConfig+0x134>
 80005e2:	e79d      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005e4:	69aa      	ldr	r2, [r5, #24]
 80005e6:	4c4a      	ldr	r4, [pc, #296]	; (8000710 <HAL_RCC_OscConfig+0x274>)
 80005e8:	4b4b      	ldr	r3, [pc, #300]	; (8000718 <HAL_RCC_OscConfig+0x27c>)
 80005ea:	b1da      	cbz	r2, 8000624 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80005ec:	2201      	movs	r2, #1
 80005ee:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005f0:	f7ff fdf6 	bl	80001e0 <HAL_GetTick>
 80005f4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005f8:	079b      	lsls	r3, r3, #30
 80005fa:	d50d      	bpl.n	8000618 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80005fc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000600:	4b46      	ldr	r3, [pc, #280]	; (800071c <HAL_RCC_OscConfig+0x280>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	fbb3 f3f2 	udiv	r3, r3, r2
 8000608:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800060a:	bf00      	nop
  }
  while (Delay --);
 800060c:	9b01      	ldr	r3, [sp, #4]
 800060e:	1e5a      	subs	r2, r3, #1
 8000610:	9201      	str	r2, [sp, #4]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d1f9      	bne.n	800060a <HAL_RCC_OscConfig+0x16e>
 8000616:	e751      	b.n	80004bc <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000618:	f7ff fde2 	bl	80001e0 <HAL_GetTick>
 800061c:	1b80      	subs	r0, r0, r6
 800061e:	2802      	cmp	r0, #2
 8000620:	d9e9      	bls.n	80005f6 <HAL_RCC_OscConfig+0x15a>
 8000622:	e77d      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000624:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000626:	f7ff fddb 	bl	80001e0 <HAL_GetTick>
 800062a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800062c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800062e:	079f      	lsls	r7, r3, #30
 8000630:	f57f af44 	bpl.w	80004bc <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000634:	f7ff fdd4 	bl	80001e0 <HAL_GetTick>
 8000638:	1b80      	subs	r0, r0, r6
 800063a:	2802      	cmp	r0, #2
 800063c:	d9f6      	bls.n	800062c <HAL_RCC_OscConfig+0x190>
 800063e:	e76f      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000640:	4c33      	ldr	r4, [pc, #204]	; (8000710 <HAL_RCC_OscConfig+0x274>)
 8000642:	69e3      	ldr	r3, [r4, #28]
 8000644:	00d8      	lsls	r0, r3, #3
 8000646:	d424      	bmi.n	8000692 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000648:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800064a:	69e3      	ldr	r3, [r4, #28]
 800064c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000650:	61e3      	str	r3, [r4, #28]
 8000652:	69e3      	ldr	r3, [r4, #28]
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800065c:	4e30      	ldr	r6, [pc, #192]	; (8000720 <HAL_RCC_OscConfig+0x284>)
 800065e:	6833      	ldr	r3, [r6, #0]
 8000660:	05d9      	lsls	r1, r3, #23
 8000662:	d518      	bpl.n	8000696 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000664:	68eb      	ldr	r3, [r5, #12]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d126      	bne.n	80006b8 <HAL_RCC_OscConfig+0x21c>
 800066a:	6a23      	ldr	r3, [r4, #32]
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000672:	f7ff fdb5 	bl	80001e0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000676:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800067a:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800067c:	6a23      	ldr	r3, [r4, #32]
 800067e:	079b      	lsls	r3, r3, #30
 8000680:	d53f      	bpl.n	8000702 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000682:	2f00      	cmp	r7, #0
 8000684:	f43f af1e 	beq.w	80004c4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000688:	69e3      	ldr	r3, [r4, #28]
 800068a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800068e:	61e3      	str	r3, [r4, #28]
 8000690:	e718      	b.n	80004c4 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000692:	2700      	movs	r7, #0
 8000694:	e7e2      	b.n	800065c <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000696:	6833      	ldr	r3, [r6, #0]
 8000698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800069c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800069e:	f7ff fd9f 	bl	80001e0 <HAL_GetTick>
 80006a2:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006a4:	6833      	ldr	r3, [r6, #0]
 80006a6:	05da      	lsls	r2, r3, #23
 80006a8:	d4dc      	bmi.n	8000664 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006aa:	f7ff fd99 	bl	80001e0 <HAL_GetTick>
 80006ae:	eba0 0008 	sub.w	r0, r0, r8
 80006b2:	2864      	cmp	r0, #100	; 0x64
 80006b4:	d9f6      	bls.n	80006a4 <HAL_RCC_OscConfig+0x208>
 80006b6:	e733      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006b8:	b9ab      	cbnz	r3, 80006e6 <HAL_RCC_OscConfig+0x24a>
 80006ba:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80006bc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006c0:	f023 0301 	bic.w	r3, r3, #1
 80006c4:	6223      	str	r3, [r4, #32]
 80006c6:	6a23      	ldr	r3, [r4, #32]
 80006c8:	f023 0304 	bic.w	r3, r3, #4
 80006cc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006ce:	f7ff fd87 	bl	80001e0 <HAL_GetTick>
 80006d2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006d4:	6a23      	ldr	r3, [r4, #32]
 80006d6:	0798      	lsls	r0, r3, #30
 80006d8:	d5d3      	bpl.n	8000682 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80006da:	f7ff fd81 	bl	80001e0 <HAL_GetTick>
 80006de:	1b80      	subs	r0, r0, r6
 80006e0:	4540      	cmp	r0, r8
 80006e2:	d9f7      	bls.n	80006d4 <HAL_RCC_OscConfig+0x238>
 80006e4:	e71c      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006e6:	2b05      	cmp	r3, #5
 80006e8:	6a23      	ldr	r3, [r4, #32]
 80006ea:	d103      	bne.n	80006f4 <HAL_RCC_OscConfig+0x258>
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	6223      	str	r3, [r4, #32]
 80006f2:	e7ba      	b.n	800066a <HAL_RCC_OscConfig+0x1ce>
 80006f4:	f023 0301 	bic.w	r3, r3, #1
 80006f8:	6223      	str	r3, [r4, #32]
 80006fa:	6a23      	ldr	r3, [r4, #32]
 80006fc:	f023 0304 	bic.w	r3, r3, #4
 8000700:	e7b6      	b.n	8000670 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000702:	f7ff fd6d 	bl	80001e0 <HAL_GetTick>
 8000706:	eba0 0008 	sub.w	r0, r0, r8
 800070a:	42b0      	cmp	r0, r6
 800070c:	d9b6      	bls.n	800067c <HAL_RCC_OscConfig+0x1e0>
 800070e:	e707      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
 8000710:	40021000 	.word	0x40021000
 8000714:	42420000 	.word	0x42420000
 8000718:	42420480 	.word	0x42420480
 800071c:	2000000c 	.word	0x2000000c
 8000720:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000724:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <HAL_RCC_OscConfig+0x334>)
 8000726:	685a      	ldr	r2, [r3, #4]
 8000728:	461c      	mov	r4, r3
 800072a:	f002 020c 	and.w	r2, r2, #12
 800072e:	2a08      	cmp	r2, #8
 8000730:	d03d      	beq.n	80007ae <HAL_RCC_OscConfig+0x312>
 8000732:	2300      	movs	r3, #0
 8000734:	4e27      	ldr	r6, [pc, #156]	; (80007d4 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000736:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000738:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800073a:	d12b      	bne.n	8000794 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 800073c:	f7ff fd50 	bl	80001e0 <HAL_GetTick>
 8000740:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000742:	6823      	ldr	r3, [r4, #0]
 8000744:	0199      	lsls	r1, r3, #6
 8000746:	d41f      	bmi.n	8000788 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000748:	6a2b      	ldr	r3, [r5, #32]
 800074a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800074e:	d105      	bne.n	800075c <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000750:	6862      	ldr	r2, [r4, #4]
 8000752:	68a9      	ldr	r1, [r5, #8]
 8000754:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000758:	430a      	orrs	r2, r1
 800075a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800075c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800075e:	6862      	ldr	r2, [r4, #4]
 8000760:	430b      	orrs	r3, r1
 8000762:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000766:	4313      	orrs	r3, r2
 8000768:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800076a:	2301      	movs	r3, #1
 800076c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800076e:	f7ff fd37 	bl	80001e0 <HAL_GetTick>
 8000772:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000774:	6823      	ldr	r3, [r4, #0]
 8000776:	019a      	lsls	r2, r3, #6
 8000778:	f53f aea8 	bmi.w	80004cc <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800077c:	f7ff fd30 	bl	80001e0 <HAL_GetTick>
 8000780:	1b40      	subs	r0, r0, r5
 8000782:	2802      	cmp	r0, #2
 8000784:	d9f6      	bls.n	8000774 <HAL_RCC_OscConfig+0x2d8>
 8000786:	e6cb      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000788:	f7ff fd2a 	bl	80001e0 <HAL_GetTick>
 800078c:	1bc0      	subs	r0, r0, r7
 800078e:	2802      	cmp	r0, #2
 8000790:	d9d7      	bls.n	8000742 <HAL_RCC_OscConfig+0x2a6>
 8000792:	e6c5      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000794:	f7ff fd24 	bl	80001e0 <HAL_GetTick>
 8000798:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800079a:	6823      	ldr	r3, [r4, #0]
 800079c:	019b      	lsls	r3, r3, #6
 800079e:	f57f ae95 	bpl.w	80004cc <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80007a2:	f7ff fd1d 	bl	80001e0 <HAL_GetTick>
 80007a6:	1b40      	subs	r0, r0, r5
 80007a8:	2802      	cmp	r0, #2
 80007aa:	d9f6      	bls.n	800079a <HAL_RCC_OscConfig+0x2fe>
 80007ac:	e6b8      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80007ae:	2801      	cmp	r0, #1
 80007b0:	f43f aeb7 	beq.w	8000522 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80007b4:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80007b6:	6a2b      	ldr	r3, [r5, #32]
 80007b8:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80007bc:	429a      	cmp	r2, r3
 80007be:	f47f ae71 	bne.w	80004a4 <HAL_RCC_OscConfig+0x8>
 80007c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80007c4:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80007c8:	1ac0      	subs	r0, r0, r3
 80007ca:	bf18      	it	ne
 80007cc:	2001      	movne	r0, #1
 80007ce:	e6a8      	b.n	8000522 <HAL_RCC_OscConfig+0x86>
 80007d0:	40021000 	.word	0x40021000
 80007d4:	42420060 	.word	0x42420060

080007d8 <HAL_RCC_GetSysClockFreq>:
{
 80007d8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80007dc:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007de:	ac02      	add	r4, sp, #8
 80007e0:	f103 0510 	add.w	r5, r3, #16
 80007e4:	4622      	mov	r2, r4
 80007e6:	6818      	ldr	r0, [r3, #0]
 80007e8:	6859      	ldr	r1, [r3, #4]
 80007ea:	3308      	adds	r3, #8
 80007ec:	c203      	stmia	r2!, {r0, r1}
 80007ee:	42ab      	cmp	r3, r5
 80007f0:	4614      	mov	r4, r2
 80007f2:	d1f7      	bne.n	80007e4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007f4:	2301      	movs	r3, #1
 80007f6:	f88d 3004 	strb.w	r3, [sp, #4]
 80007fa:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80007fc:	4911      	ldr	r1, [pc, #68]	; (8000844 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007fe:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000802:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000804:	f003 020c 	and.w	r2, r3, #12
 8000808:	2a08      	cmp	r2, #8
 800080a:	d117      	bne.n	800083c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800080c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000810:	a806      	add	r0, sp, #24
 8000812:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000814:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000816:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800081a:	d50c      	bpl.n	8000836 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800081c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800081e:	480a      	ldr	r0, [pc, #40]	; (8000848 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000820:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000824:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000826:	aa06      	add	r2, sp, #24
 8000828:	4413      	add	r3, r2
 800082a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800082e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000832:	b007      	add	sp, #28
 8000834:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <HAL_RCC_GetSysClockFreq+0x74>)
 8000838:	4350      	muls	r0, r2
 800083a:	e7fa      	b.n	8000832 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 800083c:	4802      	ldr	r0, [pc, #8]	; (8000848 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800083e:	e7f8      	b.n	8000832 <HAL_RCC_GetSysClockFreq+0x5a>
 8000840:	080019cc 	.word	0x080019cc
 8000844:	40021000 	.word	0x40021000
 8000848:	007a1200 	.word	0x007a1200
 800084c:	003d0900 	.word	0x003d0900

08000850 <HAL_RCC_ClockConfig>:
{
 8000850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000854:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000856:	4604      	mov	r4, r0
 8000858:	b910      	cbnz	r0, 8000860 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800085a:	2001      	movs	r0, #1
 800085c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000860:	4a45      	ldr	r2, [pc, #276]	; (8000978 <HAL_RCC_ClockConfig+0x128>)
 8000862:	6813      	ldr	r3, [r2, #0]
 8000864:	f003 0307 	and.w	r3, r3, #7
 8000868:	428b      	cmp	r3, r1
 800086a:	d329      	bcc.n	80008c0 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800086c:	6821      	ldr	r1, [r4, #0]
 800086e:	078e      	lsls	r6, r1, #30
 8000870:	d431      	bmi.n	80008d6 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000872:	07ca      	lsls	r2, r1, #31
 8000874:	d444      	bmi.n	8000900 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000876:	4a40      	ldr	r2, [pc, #256]	; (8000978 <HAL_RCC_ClockConfig+0x128>)
 8000878:	6813      	ldr	r3, [r2, #0]
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	429d      	cmp	r5, r3
 8000880:	d367      	bcc.n	8000952 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000882:	6822      	ldr	r2, [r4, #0]
 8000884:	4d3d      	ldr	r5, [pc, #244]	; (800097c <HAL_RCC_ClockConfig+0x12c>)
 8000886:	f012 0f04 	tst.w	r2, #4
 800088a:	d16e      	bne.n	800096a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800088c:	0713      	lsls	r3, r2, #28
 800088e:	d506      	bpl.n	800089e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000890:	686b      	ldr	r3, [r5, #4]
 8000892:	6922      	ldr	r2, [r4, #16]
 8000894:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000898:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800089c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800089e:	f7ff ff9b 	bl	80007d8 <HAL_RCC_GetSysClockFreq>
 80008a2:	686b      	ldr	r3, [r5, #4]
 80008a4:	4a36      	ldr	r2, [pc, #216]	; (8000980 <HAL_RCC_ClockConfig+0x130>)
 80008a6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80008aa:	5cd3      	ldrb	r3, [r2, r3]
 80008ac:	40d8      	lsrs	r0, r3
 80008ae:	4b35      	ldr	r3, [pc, #212]	; (8000984 <HAL_RCC_ClockConfig+0x134>)
 80008b0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80008b2:	4b35      	ldr	r3, [pc, #212]	; (8000988 <HAL_RCC_ClockConfig+0x138>)
 80008b4:	6818      	ldr	r0, [r3, #0]
 80008b6:	f7ff fc51 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 80008ba:	2000      	movs	r0, #0
 80008bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008c0:	6813      	ldr	r3, [r2, #0]
 80008c2:	f023 0307 	bic.w	r3, r3, #7
 80008c6:	430b      	orrs	r3, r1
 80008c8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80008ca:	6813      	ldr	r3, [r2, #0]
 80008cc:	f003 0307 	and.w	r3, r3, #7
 80008d0:	4299      	cmp	r1, r3
 80008d2:	d1c2      	bne.n	800085a <HAL_RCC_ClockConfig+0xa>
 80008d4:	e7ca      	b.n	800086c <HAL_RCC_ClockConfig+0x1c>
 80008d6:	4b29      	ldr	r3, [pc, #164]	; (800097c <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008d8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80008dc:	bf1e      	ittt	ne
 80008de:	685a      	ldrne	r2, [r3, #4]
 80008e0:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80008e4:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008e6:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80008e8:	bf42      	ittt	mi
 80008ea:	685a      	ldrmi	r2, [r3, #4]
 80008ec:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80008f0:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008f2:	685a      	ldr	r2, [r3, #4]
 80008f4:	68a0      	ldr	r0, [r4, #8]
 80008f6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80008fa:	4302      	orrs	r2, r0
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	e7b8      	b.n	8000872 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000900:	6862      	ldr	r2, [r4, #4]
 8000902:	4e1e      	ldr	r6, [pc, #120]	; (800097c <HAL_RCC_ClockConfig+0x12c>)
 8000904:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000906:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000908:	d11b      	bne.n	8000942 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800090a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800090e:	d0a4      	beq.n	800085a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000910:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000912:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000916:	f023 0303 	bic.w	r3, r3, #3
 800091a:	4313      	orrs	r3, r2
 800091c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800091e:	f7ff fc5f 	bl	80001e0 <HAL_GetTick>
 8000922:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000924:	6873      	ldr	r3, [r6, #4]
 8000926:	6862      	ldr	r2, [r4, #4]
 8000928:	f003 030c 	and.w	r3, r3, #12
 800092c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000930:	d0a1      	beq.n	8000876 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000932:	f7ff fc55 	bl	80001e0 <HAL_GetTick>
 8000936:	1bc0      	subs	r0, r0, r7
 8000938:	4540      	cmp	r0, r8
 800093a:	d9f3      	bls.n	8000924 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 800093c:	2003      	movs	r0, #3
}
 800093e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000942:	2a02      	cmp	r2, #2
 8000944:	d102      	bne.n	800094c <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000946:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800094a:	e7e0      	b.n	800090e <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800094c:	f013 0f02 	tst.w	r3, #2
 8000950:	e7dd      	b.n	800090e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000952:	6813      	ldr	r3, [r2, #0]
 8000954:	f023 0307 	bic.w	r3, r3, #7
 8000958:	432b      	orrs	r3, r5
 800095a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800095c:	6813      	ldr	r3, [r2, #0]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	429d      	cmp	r5, r3
 8000964:	f47f af79 	bne.w	800085a <HAL_RCC_ClockConfig+0xa>
 8000968:	e78b      	b.n	8000882 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800096a:	686b      	ldr	r3, [r5, #4]
 800096c:	68e1      	ldr	r1, [r4, #12]
 800096e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000972:	430b      	orrs	r3, r1
 8000974:	606b      	str	r3, [r5, #4]
 8000976:	e789      	b.n	800088c <HAL_RCC_ClockConfig+0x3c>
 8000978:	40022000 	.word	0x40022000
 800097c:	40021000 	.word	0x40021000
 8000980:	08001a04 	.word	0x08001a04
 8000984:	2000000c 	.word	0x2000000c
 8000988:	20000004 	.word	0x20000004

0800098c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800098c:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <HAL_RCC_GetPCLK1Freq+0x14>)
 800098e:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000996:	5cd3      	ldrb	r3, [r2, r3]
 8000998:	4a03      	ldr	r2, [pc, #12]	; (80009a8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800099a:	6810      	ldr	r0, [r2, #0]
}
 800099c:	40d8      	lsrs	r0, r3
 800099e:	4770      	bx	lr
 80009a0:	40021000 	.word	0x40021000
 80009a4:	08001a14 	.word	0x08001a14
 80009a8:	2000000c 	.word	0x2000000c

080009ac <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80009ae:	4a05      	ldr	r2, [pc, #20]	; (80009c4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80009b6:	5cd3      	ldrb	r3, [r2, r3]
 80009b8:	4a03      	ldr	r2, [pc, #12]	; (80009c8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80009ba:	6810      	ldr	r0, [r2, #0]
}
 80009bc:	40d8      	lsrs	r0, r3
 80009be:	4770      	bx	lr
 80009c0:	40021000 	.word	0x40021000
 80009c4:	08001a14 	.word	0x08001a14
 80009c8:	2000000c 	.word	0x2000000c

080009cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80009cc:	b538      	push	{r3, r4, r5, lr}
 80009ce:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80009d0:	6803      	ldr	r3, [r0, #0]
 80009d2:	68c1      	ldr	r1, [r0, #12]
 80009d4:	691a      	ldr	r2, [r3, #16]
 80009d6:	2419      	movs	r4, #25
 80009d8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80009dc:	430a      	orrs	r2, r1
 80009de:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80009e0:	6882      	ldr	r2, [r0, #8]
 80009e2:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80009e4:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80009e6:	4302      	orrs	r2, r0
 80009e8:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 80009ea:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80009ee:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80009f2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80009f4:	430a      	orrs	r2, r1
 80009f6:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80009f8:	695a      	ldr	r2, [r3, #20]
 80009fa:	69a9      	ldr	r1, [r5, #24]
 80009fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000a00:	430a      	orrs	r2, r1
 8000a02:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000a04:	4a0d      	ldr	r2, [pc, #52]	; (8000a3c <UART_SetConfig+0x70>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d114      	bne.n	8000a34 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8000a0a:	f7ff ffcf 	bl	80009ac <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000a0e:	4360      	muls	r0, r4
 8000a10:	686c      	ldr	r4, [r5, #4]
 8000a12:	2264      	movs	r2, #100	; 0x64
 8000a14:	00a4      	lsls	r4, r4, #2
 8000a16:	fbb0 f0f4 	udiv	r0, r0, r4
 8000a1a:	fbb0 f4f2 	udiv	r4, r0, r2
 8000a1e:	fb02 0314 	mls	r3, r2, r4, r0
 8000a22:	011b      	lsls	r3, r3, #4
 8000a24:	3332      	adds	r3, #50	; 0x32
 8000a26:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a2a:	6829      	ldr	r1, [r5, #0]
 8000a2c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8000a30:	608b      	str	r3, [r1, #8]
 8000a32:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8000a34:	f7ff ffaa 	bl	800098c <HAL_RCC_GetPCLK1Freq>
 8000a38:	e7e9      	b.n	8000a0e <UART_SetConfig+0x42>
 8000a3a:	bf00      	nop
 8000a3c:	40013800 	.word	0x40013800

08000a40 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a42:	4604      	mov	r4, r0
 8000a44:	460e      	mov	r6, r1
 8000a46:	4617      	mov	r7, r2
 8000a48:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000a4a:	6821      	ldr	r1, [r4, #0]
 8000a4c:	680b      	ldr	r3, [r1, #0]
 8000a4e:	ea36 0303 	bics.w	r3, r6, r3
 8000a52:	d101      	bne.n	8000a58 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000a54:	2000      	movs	r0, #0
}
 8000a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000a58:	1c6b      	adds	r3, r5, #1
 8000a5a:	d0f7      	beq.n	8000a4c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000a5c:	b995      	cbnz	r5, 8000a84 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000a5e:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000a60:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000a62:	68da      	ldr	r2, [r3, #12]
 8000a64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000a68:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000a6a:	695a      	ldr	r2, [r3, #20]
 8000a6c:	f022 0201 	bic.w	r2, r2, #1
 8000a70:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000a72:	2320      	movs	r3, #32
 8000a74:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000a78:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000a84:	f7ff fbac 	bl	80001e0 <HAL_GetTick>
 8000a88:	1bc0      	subs	r0, r0, r7
 8000a8a:	4285      	cmp	r5, r0
 8000a8c:	d2dd      	bcs.n	8000a4a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000a8e:	e7e6      	b.n	8000a5e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000a90 <HAL_UART_Init>:
{
 8000a90:	b510      	push	{r4, lr}
  if (huart == NULL)
 8000a92:	4604      	mov	r4, r0
 8000a94:	b340      	cbz	r0, 8000ae8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8000a96:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000a9a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000a9e:	b91b      	cbnz	r3, 8000aa8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000aa0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000aa4:	f000 f95c 	bl	8000d60 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000aa8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000aaa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000aac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000ab0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000ab2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000ab4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ab8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000aba:	f7ff ff87 	bl	80009cc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000abe:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ac0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ac2:	691a      	ldr	r2, [r3, #16]
 8000ac4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000ac8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000aca:	695a      	ldr	r2, [r3, #20]
 8000acc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000ad0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000ad2:	68da      	ldr	r2, [r3, #12]
 8000ad4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ad8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8000ada:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000adc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000ade:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000ae2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000ae6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000ae8:	2001      	movs	r0, #1
}
 8000aea:	bd10      	pop	{r4, pc}

08000aec <HAL_UART_Transmit>:
{
 8000aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000af0:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8000af2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000af6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8000af8:	2b20      	cmp	r3, #32
{
 8000afa:	460d      	mov	r5, r1
 8000afc:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8000afe:	d14e      	bne.n	8000b9e <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 8000b00:	2900      	cmp	r1, #0
 8000b02:	d049      	beq.n	8000b98 <HAL_UART_Transmit+0xac>
 8000b04:	2a00      	cmp	r2, #0
 8000b06:	d047      	beq.n	8000b98 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000b08:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d046      	beq.n	8000b9e <HAL_UART_Transmit+0xb2>
 8000b10:	2301      	movs	r3, #1
 8000b12:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000b1a:	2321      	movs	r3, #33	; 0x21
 8000b1c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000b20:	f7ff fb5e 	bl	80001e0 <HAL_GetTick>
 8000b24:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8000b26:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000b2a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8000b2e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	b96b      	cbnz	r3, 8000b50 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000b34:	463b      	mov	r3, r7
 8000b36:	4632      	mov	r2, r6
 8000b38:	2140      	movs	r1, #64	; 0x40
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	f7ff ff80 	bl	8000a40 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000b40:	b9a8      	cbnz	r0, 8000b6e <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8000b42:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000b44:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8000b48:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8000b50:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000b52:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8000b54:	3b01      	subs	r3, #1
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000b5a:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000b5c:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000b62:	4620      	mov	r0, r4
 8000b64:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000b66:	d10e      	bne.n	8000b86 <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000b68:	f7ff ff6a 	bl	8000a40 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000b6c:	b110      	cbz	r0, 8000b74 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8000b6e:	2003      	movs	r0, #3
 8000b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000b74:	882b      	ldrh	r3, [r5, #0]
 8000b76:	6822      	ldr	r2, [r4, #0]
 8000b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b7c:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8000b7e:	6923      	ldr	r3, [r4, #16]
 8000b80:	b943      	cbnz	r3, 8000b94 <HAL_UART_Transmit+0xa8>
          pData += 2U;
 8000b82:	3502      	adds	r5, #2
 8000b84:	e7d3      	b.n	8000b2e <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000b86:	f7ff ff5b 	bl	8000a40 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000b8a:	2800      	cmp	r0, #0
 8000b8c:	d1ef      	bne.n	8000b6e <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000b8e:	6823      	ldr	r3, [r4, #0]
 8000b90:	782a      	ldrb	r2, [r5, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	3501      	adds	r5, #1
 8000b96:	e7ca      	b.n	8000b2e <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8000b98:	2001      	movs	r0, #1
 8000b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8000b9e:	2002      	movs	r0, #2
}
 8000ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000ba4 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(wig_flag_inrt && GPIO_Pin == D0)
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <HAL_GPIO_EXTI_Callback+0x20>)
 8000ba6:	781a      	ldrb	r2, [r3, #0]
 8000ba8:	b122      	cbz	r2, 8000bb4 <HAL_GPIO_EXTI_Callback+0x10>
 8000baa:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8000bae:	d101      	bne.n	8000bb4 <HAL_GPIO_EXTI_Callback+0x10>
	{
		ReadD0();
 8000bb0:	f000 b974 	b.w	8000e9c <ReadD0>
	}
	else if(wig_flag_inrt && GPIO_Pin == D1)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	b123      	cbz	r3, 8000bc2 <HAL_GPIO_EXTI_Callback+0x1e>
 8000bb8:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000bbc:	d101      	bne.n	8000bc2 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		ReadD1();
 8000bbe:	f000 b991 	b.w	8000ee4 <ReadD1>
 8000bc2:	4770      	bx	lr
 8000bc4:	20000008 	.word	0x20000008

08000bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc8:	b510      	push	{r4, lr}
 8000bca:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bcc:	2228      	movs	r2, #40	; 0x28
 8000bce:	2100      	movs	r1, #0
 8000bd0:	a806      	add	r0, sp, #24
 8000bd2:	f000 faab 	bl	800112c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2214      	movs	r2, #20
 8000bda:	a801      	add	r0, sp, #4
 8000bdc:	f000 faa6 	bl	800112c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000be4:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be6:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be8:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bea:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf0:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bf2:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf4:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bf6:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf8:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfa:	f7ff fc4f 	bl	800049c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfe:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c00:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c04:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c08:	4621      	mov	r1, r4
 8000c0a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c0c:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c10:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c12:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c14:	f7ff fe1c 	bl	8000850 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000c18:	b010      	add	sp, #64	; 0x40
 8000c1a:	bd10      	pop	{r4, pc}

08000c1c <main>:
{
 8000c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c20:	b096      	sub	sp, #88	; 0x58
  HAL_Init();
 8000c22:	f7ff fabf 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 8000c26:	f7ff ffcf 	bl	8000bc8 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2a:	2210      	movs	r2, #16
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	a806      	add	r0, sp, #24
 8000c30:	f000 fa7c 	bl	800112c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c34:	4b32      	ldr	r3, [pc, #200]	; (8000d00 <main+0xe4>)
  huart1.Init.BaudRate = 115200;
 8000c36:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3a:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : D0_Pin D1_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3c:	a906      	add	r1, sp, #24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3e:	f042 0220 	orr.w	r2, r2, #32
 8000c42:	619a      	str	r2, [r3, #24]
 8000c44:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c46:	482f      	ldr	r0, [pc, #188]	; (8000d04 <main+0xe8>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c48:	f002 0220 	and.w	r2, r2, #32
 8000c4c:	9203      	str	r2, [sp, #12]
 8000c4e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c50:	699a      	ldr	r2, [r3, #24]
			wig_flag_inrt = 0;
 8000c52:	4e2d      	ldr	r6, [pc, #180]	; (8000d08 <main+0xec>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c54:	f042 0208 	orr.w	r2, r2, #8
 8000c58:	619a      	str	r2, [r3, #24]
 8000c5a:	699a      	ldr	r2, [r3, #24]
			snprintf(str, 64, "HEX=0x%lX DEC=%lu, Protokol Wiegand-%d\n", wcode, wcode, wtype);
 8000c5c:	4f2b      	ldr	r7, [pc, #172]	; (8000d0c <main+0xf0>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5e:	f002 0208 	and.w	r2, r2, #8
 8000c62:	9204      	str	r2, [sp, #16]
 8000c64:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	699a      	ldr	r2, [r3, #24]
 8000c68:	f042 0204 	orr.w	r2, r2, #4
 8000c6c:	619a      	str	r2, [r3, #24]
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f003 0304 	and.w	r3, r3, #4
 8000c74:	9305      	str	r3, [sp, #20]
 8000c76:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin;
 8000c78:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c7c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c7e:	4b24      	ldr	r3, [pc, #144]	; (8000d10 <main+0xf4>)
 8000c80:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c82:	f7ff fb1d 	bl	80002c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2103      	movs	r1, #3
 8000c8a:	2028      	movs	r0, #40	; 0x28
 8000c8c:	f7ff fac0 	bl	8000210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c90:	2028      	movs	r0, #40	; 0x28
 8000c92:	f7ff faf1 	bl	8000278 <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 8000c96:	481f      	ldr	r0, [pc, #124]	; (8000d14 <main+0xf8>)
  huart1.Init.BaudRate = 115200;
 8000c98:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <main+0xfc>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c9a:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8000c9c:	e880 0018 	stmia.w	r0, {r3, r4}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca0:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ca2:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ca6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ca8:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000caa:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cac:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cae:	f7ff feef 	bl	8000a90 <HAL_UART_Init>
		if(wig_available())
 8000cb2:	f000 f95f 	bl	8000f74 <wig_available>
 8000cb6:	2800      	cmp	r0, #0
 8000cb8:	d0fb      	beq.n	8000cb2 <main+0x96>
			wig_flag_inrt = 0;
 8000cba:	2500      	movs	r5, #0
 8000cbc:	7035      	strb	r5, [r6, #0]
			uint32_t wcode = getCode();
 8000cbe:	f000 f8e1 	bl	8000e84 <getCode>
 8000cc2:	4604      	mov	r4, r0
			int16_t wtype = getWiegandType();
 8000cc4:	f000 f8e4 	bl	8000e90 <getWiegandType>
			wig_flag_inrt = 1;
 8000cc8:	2301      	movs	r3, #1
			int16_t wtype = getWiegandType();
 8000cca:	4680      	mov	r8, r0
			char str[64] = {0,};
 8000ccc:	4629      	mov	r1, r5
 8000cce:	2240      	movs	r2, #64	; 0x40
 8000cd0:	a806      	add	r0, sp, #24
			wig_flag_inrt = 1;
 8000cd2:	7033      	strb	r3, [r6, #0]
			char str[64] = {0,};
 8000cd4:	f000 fa2a 	bl	800112c <memset>
			snprintf(str, 64, "HEX=0x%lX DEC=%lu, Protokol Wiegand-%d\n", wcode, wcode, wtype);
 8000cd8:	4623      	mov	r3, r4
 8000cda:	463a      	mov	r2, r7
 8000cdc:	2140      	movs	r1, #64	; 0x40
 8000cde:	e88d 0110 	stmia.w	sp, {r4, r8}
 8000ce2:	a806      	add	r0, sp, #24
 8000ce4:	f000 fa2a 	bl	800113c <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8000ce8:	a806      	add	r0, sp, #24
 8000cea:	f7ff fa2f 	bl	800014c <strlen>
 8000cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf2:	b282      	uxth	r2, r0
 8000cf4:	a906      	add	r1, sp, #24
 8000cf6:	4807      	ldr	r0, [pc, #28]	; (8000d14 <main+0xf8>)
 8000cf8:	f7ff fef8 	bl	8000aec <HAL_UART_Transmit>
 8000cfc:	e7d9      	b.n	8000cb2 <main+0x96>
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000
 8000d04:	40010c00 	.word	0x40010c00
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	080019dc 	.word	0x080019dc
 8000d10:	10210000 	.word	0x10210000
 8000d14:	200000b8 	.word	0x200000b8
 8000d18:	40013800 	.word	0x40013800

08000d1c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <HAL_MspInit+0x3c>)
{
 8000d1e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d20:	699a      	ldr	r2, [r3, #24]
 8000d22:	f042 0201 	orr.w	r2, r2, #1
 8000d26:	619a      	str	r2, [r3, #24]
 8000d28:	699a      	ldr	r2, [r3, #24]
 8000d2a:	f002 0201 	and.w	r2, r2, #1
 8000d2e:	9200      	str	r2, [sp, #0]
 8000d30:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d32:	69da      	ldr	r2, [r3, #28]
 8000d34:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d38:	61da      	str	r2, [r3, #28]
 8000d3a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d3c:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d42:	9301      	str	r3, [sp, #4]
 8000d44:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d46:	6853      	ldr	r3, [r2, #4]
 8000d48:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d52:	b002      	add	sp, #8
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40010000 	.word	0x40010000

08000d60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d60:	b510      	push	{r4, lr}
 8000d62:	4604      	mov	r4, r0
 8000d64:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d66:	2210      	movs	r2, #16
 8000d68:	2100      	movs	r1, #0
 8000d6a:	a802      	add	r0, sp, #8
 8000d6c:	f000 f9de 	bl	800112c <memset>
  if(huart->Instance==USART1)
 8000d70:	6822      	ldr	r2, [r4, #0]
 8000d72:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <HAL_UART_MspInit+0x70>)
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d128      	bne.n	8000dca <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d78:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8000d7c:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d84:	619a      	str	r2, [r3, #24]
 8000d86:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	4812      	ldr	r0, [pc, #72]	; (8000dd4 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d8a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000d8e:	9200      	str	r2, [sp, #0]
 8000d90:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	699a      	ldr	r2, [r3, #24]
 8000d94:	f042 0204 	orr.w	r2, r2, #4
 8000d98:	619a      	str	r2, [r3, #24]
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0304 	and.w	r3, r3, #4
 8000da0:	9301      	str	r3, [sp, #4]
 8000da2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000da8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dae:	2303      	movs	r3, #3
 8000db0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db2:	f7ff fa85 	bl	80002c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dba:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbc:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	a902      	add	r1, sp, #8
 8000dc0:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f7ff fa7b 	bl	80002c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dca:	b006      	add	sp, #24
 8000dcc:	bd10      	pop	{r4, pc}
 8000dce:	bf00      	nop
 8000dd0:	40013800 	.word	0x40013800
 8000dd4:	40010800 	.word	0x40010800

08000dd8 <NMI_Handler>:
 8000dd8:	4770      	bx	lr

08000dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dda:	e7fe      	b.n	8000dda <HardFault_Handler>

08000ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	e7fe      	b.n	8000dde <BusFault_Handler>

08000de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de0:	e7fe      	b.n	8000de0 <UsageFault_Handler>

08000de2 <SVC_Handler>:
 8000de2:	4770      	bx	lr

08000de4 <DebugMon_Handler>:
 8000de4:	4770      	bx	lr

08000de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de6:	4770      	bx	lr

08000de8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de8:	f7ff b9ee 	b.w	80001c8 <HAL_IncTick>

08000dec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000dee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000df2:	f7ff fb47 	bl	8000484 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000df6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000dfa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000dfe:	f7ff bb41 	b.w	8000484 <HAL_GPIO_EXTI_IRQHandler>
	...

08000e04 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000e04:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <_sbrk+0x2c>)
{
 8000e08:	4602      	mov	r2, r0
	if (heap_end == 0)
 8000e0a:	6819      	ldr	r1, [r3, #0]
 8000e0c:	b909      	cbnz	r1, 8000e12 <_sbrk+0xe>
		heap_end = &end;
 8000e0e:	4909      	ldr	r1, [pc, #36]	; (8000e34 <_sbrk+0x30>)
 8000e10:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8000e12:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8000e14:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8000e16:	4402      	add	r2, r0
 8000e18:	428a      	cmp	r2, r1
 8000e1a:	d906      	bls.n	8000e2a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000e1c:	f000 f95c 	bl	80010d8 <__errno>
 8000e20:	230c      	movs	r3, #12
 8000e22:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e28:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8000e2a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8000e2c:	bd08      	pop	{r3, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000090 	.word	0x20000090
 8000e34:	200000fc 	.word	0x200000fc

08000e38 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <SystemInit+0x40>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	f042 0201 	orr.w	r2, r2, #1
 8000e40:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000e42:	6859      	ldr	r1, [r3, #4]
 8000e44:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <SystemInit+0x44>)
 8000e46:	400a      	ands	r2, r1
 8000e48:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000e50:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e54:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e5c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000e64:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000e66:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000e6a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000e6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <SystemInit+0x48>)
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	f8ff0000 	.word	0xf8ff0000
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <getCode>:


uint32_t getCode()
{
	return code;
}
 8000e84:	4b01      	ldr	r3, [pc, #4]	; (8000e8c <getCode+0x8>)
 8000e86:	6818      	ldr	r0, [r3, #0]
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	200000a0 	.word	0x200000a0

08000e90 <getWiegandType>:

int16_t getWiegandType()
{
	return wiegandType;
}
 8000e90:	4b01      	ldr	r3, [pc, #4]	; (8000e98 <getWiegandType+0x8>)
 8000e92:	f9b3 0000 	ldrsh.w	r0, [r3]
 8000e96:	4770      	bx	lr
 8000e98:	200000a8 	.word	0x200000a8

08000e9c <ReadD0>:
}
*/

void ReadD0()
{
	bitCount++;				// Increament bit count for Interrupt connected to D0
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <ReadD0+0x38>)
{
 8000e9e:	b508      	push	{r3, lr}
	bitCount++;				// Increament bit count for Interrupt connected to D0
 8000ea0:	8813      	ldrh	r3, [r2, #0]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	b21b      	sxth	r3, r3
 8000ea6:	8013      	strh	r3, [r2, #0]

	if (bitCount > 31)			// If bit count more than 31, process high bits
 8000ea8:	8813      	ldrh	r3, [r2, #0]
 8000eaa:	b21b      	sxth	r3, r3
 8000eac:	2b1f      	cmp	r3, #31
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <ReadD0+0x3c>)
 8000eb0:	dd08      	ble.n	8000ec4 <ReadD0+0x28>
	{
		cardTempHigh |= ((0x80000000 & cardTemp) >> 31);	//	shift value to high bits
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <ReadD0+0x40>)
 8000eb4:	6818      	ldr	r0, [r3, #0]
 8000eb6:	6811      	ldr	r1, [r2, #0]
 8000eb8:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8000ebc:	6011      	str	r1, [r2, #0]
		cardTempHigh <<= 1;
 8000ebe:	6811      	ldr	r1, [r2, #0]
 8000ec0:	0049      	lsls	r1, r1, #1
 8000ec2:	6011      	str	r1, [r2, #0]
		cardTemp <<= 1;
	}
	else
	{
		cardTemp <<= 1;		// D0 represent binary 0, so just left shift card data
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	0052      	lsls	r2, r2, #1
 8000ec8:	601a      	str	r2, [r3, #0]
	}

	lastWiegand = HAL_GetTick();	// Keep track of last wiegand bit received
 8000eca:	f7ff f989 	bl	80001e0 <HAL_GetTick>
 8000ece:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <ReadD0+0x44>)
 8000ed0:	6018      	str	r0, [r3, #0]
 8000ed2:	bd08      	pop	{r3, pc}
 8000ed4:	20000094 	.word	0x20000094
 8000ed8:	20000098 	.word	0x20000098
 8000edc:	2000009c 	.word	0x2000009c
 8000ee0:	200000a4 	.word	0x200000a4

08000ee4 <ReadD1>:
}

void ReadD1()
{
	bitCount++;				// Increment bit count for Interrupt connected to D1
 8000ee4:	4a0f      	ldr	r2, [pc, #60]	; (8000f24 <ReadD1+0x40>)
{
 8000ee6:	b508      	push	{r3, lr}
	bitCount++;				// Increment bit count for Interrupt connected to D1
 8000ee8:	8813      	ldrh	r3, [r2, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	b21b      	sxth	r3, r3
 8000eee:	8013      	strh	r3, [r2, #0]

	if(bitCount > 31)			// If bit count more than 31, process high bits
 8000ef0:	8813      	ldrh	r3, [r2, #0]
 8000ef2:	b21b      	sxth	r3, r3
 8000ef4:	2b1f      	cmp	r3, #31
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <ReadD1+0x44>)
 8000ef8:	dd08      	ble.n	8000f0c <ReadD1+0x28>
	{
		cardTempHigh |= ((0x80000000 & cardTemp) >> 31);	// shift value to high bits
 8000efa:	4a0c      	ldr	r2, [pc, #48]	; (8000f2c <ReadD1+0x48>)
 8000efc:	6818      	ldr	r0, [r3, #0]
 8000efe:	6811      	ldr	r1, [r2, #0]
 8000f00:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8000f04:	6011      	str	r1, [r2, #0]
		cardTempHigh <<= 1;
 8000f06:	6811      	ldr	r1, [r2, #0]
 8000f08:	0049      	lsls	r1, r1, #1
 8000f0a:	6011      	str	r1, [r2, #0]
		cardTemp |= 1;
		cardTemp <<= 1;
	}
	else
	{
		cardTemp |= 1;			// D1 represent binary 1, so OR card data with 1 then
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	f042 0201 	orr.w	r2, r2, #1
 8000f12:	601a      	str	r2, [r3, #0]
		cardTemp <<= 1;		// left shift card data
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	0052      	lsls	r2, r2, #1
 8000f18:	601a      	str	r2, [r3, #0]
	}

	lastWiegand = HAL_GetTick();	// Keep track of last wiegand bit received
 8000f1a:	f7ff f961 	bl	80001e0 <HAL_GetTick>
 8000f1e:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <ReadD1+0x4c>)
 8000f20:	6018      	str	r0, [r3, #0]
 8000f22:	bd08      	pop	{r3, pc}
 8000f24:	20000094 	.word	0x20000094
 8000f28:	20000098 	.word	0x20000098
 8000f2c:	2000009c 	.word	0x2000009c
 8000f30:	200000a4 	.word	0x200000a4

08000f34 <GetCardId>:
}

uint32_t GetCardId(volatile uint32_t *codehigh, volatile uint32_t *codelow, uint8_t bitlength)
{

	if(bitlength == 26)								// EM tag
 8000f34:	2a1a      	cmp	r2, #26
 8000f36:	d103      	bne.n	8000f40 <GetCardId+0xc>
	{
		return (*codelow & 0x1FFFFFE) >> 1;
 8000f38:	6808      	ldr	r0, [r1, #0]
 8000f3a:	f3c0 0057 	ubfx	r0, r0, #1, #24
 8000f3e:	4770      	bx	lr
	}

	if(bitlength == 34)								// Mifare
 8000f40:	2a22      	cmp	r2, #34	; 0x22
 8000f42:	d10d      	bne.n	8000f60 <GetCardId+0x2c>
	{
		*codehigh = *codehigh & 0x03;				// only need the 2 LSB of the codehigh
 8000f44:	6803      	ldr	r3, [r0, #0]
 8000f46:	f003 0303 	and.w	r3, r3, #3
 8000f4a:	6003      	str	r3, [r0, #0]
		*codehigh <<= 30;							// shift 2 LSB to MSB
 8000f4c:	6803      	ldr	r3, [r0, #0]
 8000f4e:	079b      	lsls	r3, r3, #30
 8000f50:	6003      	str	r3, [r0, #0]
		*codelow >>= 1;
 8000f52:	680b      	ldr	r3, [r1, #0]
 8000f54:	085b      	lsrs	r3, r3, #1
 8000f56:	600b      	str	r3, [r1, #0]
		return *codehigh | *codelow;
 8000f58:	6800      	ldr	r0, [r0, #0]
 8000f5a:	680b      	ldr	r3, [r1, #0]
 8000f5c:	4318      	orrs	r0, r3
 8000f5e:	4770      	bx	lr
	}

	return *codelow;								// EM tag or Mifare without parity bits
 8000f60:	6808      	ldr	r0, [r1, #0]
}
 8000f62:	4770      	bx	lr

08000f64 <translateEnterEscapeKeyPress>:

uint8_t translateEnterEscapeKeyPress(uint8_t originalKeyPress)
{
	switch(originalKeyPress)
 8000f64:	280a      	cmp	r0, #10
 8000f66:	d003      	beq.n	8000f70 <translateEnterEscapeKeyPress+0xc>
 8000f68:	280b      	cmp	r0, #11
	{
		case 0x0b:        // 11 or * key
			return 0x0d;  // 13 or ASCII ENTER
 8000f6a:	bf08      	it	eq
 8000f6c:	200d      	moveq	r0, #13
 8000f6e:	4770      	bx	lr

		case 0x0a:        // 10 or # key
			return 0x1b;  // 27 or ASCII ESCAPE
 8000f70:	201b      	movs	r0, #27

		default:
			return originalKeyPress;
	}
}
 8000f72:	4770      	bx	lr

08000f74 <wig_available>:

uint8_t wig_available()
{
 8000f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t cardID;
	uint32_t time_wig = HAL_GetTick();
 8000f78:	f7ff f932 	bl	80001e0 <HAL_GetTick>

	if((time_wig - lastWiegand) > 25) // if no more signal coming through after 25ms
 8000f7c:	4a3d      	ldr	r2, [pc, #244]	; (8001074 <wig_available+0x100>)
 8000f7e:	6813      	ldr	r3, [r2, #0]
 8000f80:	4696      	mov	lr, r2
 8000f82:	1ac3      	subs	r3, r0, r3
 8000f84:	2b19      	cmp	r3, #25
 8000f86:	d947      	bls.n	8001018 <wig_available+0xa4>
	{
		if((bitCount == 24) || (bitCount == 26) || (bitCount == 32) || (bitCount == 34) || (bitCount == 8) || (bitCount == 4)) // bitCount for keypress=4 or 8, Wiegand 26=24 or 26, Wiegand 34=32 or 34
 8000f88:	4b3b      	ldr	r3, [pc, #236]	; (8001078 <wig_available+0x104>)
 8000f8a:	4d3c      	ldr	r5, [pc, #240]	; (800107c <wig_available+0x108>)
 8000f8c:	8819      	ldrh	r1, [r3, #0]
 8000f8e:	461c      	mov	r4, r3
 8000f90:	b209      	sxth	r1, r1
 8000f92:	2918      	cmp	r1, #24
 8000f94:	4e3a      	ldr	r6, [pc, #232]	; (8001080 <wig_available+0x10c>)
 8000f96:	d013      	beq.n	8000fc0 <wig_available+0x4c>
 8000f98:	8819      	ldrh	r1, [r3, #0]
 8000f9a:	b209      	sxth	r1, r1
 8000f9c:	291a      	cmp	r1, #26
 8000f9e:	d00f      	beq.n	8000fc0 <wig_available+0x4c>
 8000fa0:	8819      	ldrh	r1, [r3, #0]
 8000fa2:	b209      	sxth	r1, r1
 8000fa4:	2920      	cmp	r1, #32
 8000fa6:	d00b      	beq.n	8000fc0 <wig_available+0x4c>
 8000fa8:	8819      	ldrh	r1, [r3, #0]
 8000faa:	b209      	sxth	r1, r1
 8000fac:	2922      	cmp	r1, #34	; 0x22
 8000fae:	d007      	beq.n	8000fc0 <wig_available+0x4c>
 8000fb0:	8819      	ldrh	r1, [r3, #0]
 8000fb2:	b209      	sxth	r1, r1
 8000fb4:	2908      	cmp	r1, #8
 8000fb6:	d003      	beq.n	8000fc0 <wig_available+0x4c>
 8000fb8:	8819      	ldrh	r1, [r3, #0]
 8000fba:	b209      	sxth	r1, r1
 8000fbc:	2904      	cmp	r1, #4
 8000fbe:	d151      	bne.n	8001064 <wig_available+0xf0>
		{
			cardTemp >>= 1; // shift right 1 bit to get back the real value - interrupt done 1 left shift in advance
 8000fc0:	682b      	ldr	r3, [r5, #0]
 8000fc2:	4f30      	ldr	r7, [pc, #192]	; (8001084 <wig_available+0x110>)
 8000fc4:	085b      	lsrs	r3, r3, #1
 8000fc6:	602b      	str	r3, [r5, #0]

			if(bitCount > 32) // bit count more than 32 bits, shift high bits right to make adjustment
 8000fc8:	8823      	ldrh	r3, [r4, #0]
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	2b20      	cmp	r3, #32
			{
				cardTempHigh >>= 1;
 8000fce:	bfc2      	ittt	gt
 8000fd0:	6833      	ldrgt	r3, [r6, #0]
 8000fd2:	085b      	lsrgt	r3, r3, #1
 8000fd4:	6033      	strgt	r3, [r6, #0]
			}

			if(bitCount == 8)		// keypress wiegand with integrity
 8000fd6:	8823      	ldrh	r3, [r4, #0]
 8000fd8:	b21b      	sxth	r3, r3
 8000fda:	2b08      	cmp	r3, #8
 8000fdc:	d11f      	bne.n	800101e <wig_available+0xaa>
			{
				// 8-bit Wiegand keyboard data, high nibble is the "NOT" of low nibble
				// eg if key 1 pressed, data=E1 in binary 11100001 , high nibble=1110 , low nibble = 0001
				uint8_t highNibble = (cardTemp & 0xf0) >> 4;
 8000fde:	682a      	ldr	r2, [r5, #0]
				uint8_t lowNibble = (cardTemp & 0x0f);
 8000fe0:	6829      	ldr	r1, [r5, #0]
				wiegandType = bitCount;
 8000fe2:	8823      	ldrh	r3, [r4, #0]
				bitCount = 0;
				cardTemp = 0;
				cardTempHigh = 0;

				if(lowNibble == (~highNibble & 0x0f))		// check if low nibble matches the "NOT" of high nibble.
 8000fe4:	f082 02f0 	eor.w	r2, r2, #240	; 0xf0
				wiegandType = bitCount;
 8000fe8:	803b      	strh	r3, [r7, #0]
				bitCount = 0;
 8000fea:	2300      	movs	r3, #0
				uint8_t lowNibble = (cardTemp & 0x0f);
 8000fec:	f001 010f 	and.w	r1, r1, #15
				if(lowNibble == (~highNibble & 0x0f))		// check if low nibble matches the "NOT" of high nibble.
 8000ff0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000ff4:	4291      	cmp	r1, r2
				bitCount = 0;
 8000ff6:	8023      	strh	r3, [r4, #0]
				cardTemp = 0;
 8000ff8:	602b      	str	r3, [r5, #0]
				cardTempHigh = 0;
 8000ffa:	6033      	str	r3, [r6, #0]
				if(lowNibble == (~highNibble & 0x0f))		// check if low nibble matches the "NOT" of high nibble.
 8000ffc:	d107      	bne.n	800100e <wig_available+0x9a>
				{
					code = (int16_t)translateEnterEscapeKeyPress(lowNibble);
 8000ffe:	4608      	mov	r0, r1
 8001000:	f7ff ffb0 	bl	8000f64 <translateEnterEscapeKeyPress>
 8001004:	4b20      	ldr	r3, [pc, #128]	; (8001088 <wig_available+0x114>)
 8001006:	6018      	str	r0, [r3, #0]
				wiegandType = bitCount;
				bitCount = 0;
				cardTemp = 0;
				cardTempHigh = 0;
				code = cardID;
				return 1;
 8001008:	2001      	movs	r0, #1
 800100a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					lastWiegand = time_wig;
 800100e:	f8ce 0000 	str.w	r0, [lr]
					bitCount = 0;
 8001012:	8023      	strh	r3, [r4, #0]
					cardTemp = 0;
 8001014:	602b      	str	r3, [r5, #0]
					cardTempHigh = 0;
 8001016:	6033      	str	r3, [r6, #0]
			return 0;
		}
	}
	else
	{
		return 0;
 8001018:	2000      	movs	r0, #0
	}
}
 800101a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			else if(4 == bitCount)
 800101e:	8823      	ldrh	r3, [r4, #0]
 8001020:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8001088 <wig_available+0x114>
 8001024:	b21b      	sxth	r3, r3
 8001026:	2b04      	cmp	r3, #4
 8001028:	d10d      	bne.n	8001046 <wig_available+0xd2>
				code = (int16_t)translateEnterEscapeKeyPress(cardTemp & 0x0000000F);
 800102a:	6828      	ldr	r0, [r5, #0]
 800102c:	f000 000f 	and.w	r0, r0, #15
 8001030:	f7ff ff98 	bl	8000f64 <translateEnterEscapeKeyPress>
				wiegandType = bitCount;
 8001034:	8823      	ldrh	r3, [r4, #0]
				code = (int16_t)translateEnterEscapeKeyPress(cardTemp & 0x0000000F);
 8001036:	f8c8 0000 	str.w	r0, [r8]
				wiegandType = bitCount;
 800103a:	803b      	strh	r3, [r7, #0]
				bitCount = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	8023      	strh	r3, [r4, #0]
				cardTemp = 0;
 8001040:	602b      	str	r3, [r5, #0]
				cardTempHigh = 0;
 8001042:	6033      	str	r3, [r6, #0]
 8001044:	e7e0      	b.n	8001008 <wig_available+0x94>
				cardID = GetCardId(&cardTempHigh, &cardTemp, bitCount);
 8001046:	8822      	ldrh	r2, [r4, #0]
 8001048:	490c      	ldr	r1, [pc, #48]	; (800107c <wig_available+0x108>)
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	480c      	ldr	r0, [pc, #48]	; (8001080 <wig_available+0x10c>)
 800104e:	f7ff ff71 	bl	8000f34 <GetCardId>
				wiegandType = bitCount;
 8001052:	8823      	ldrh	r3, [r4, #0]
				code = cardID;
 8001054:	f8c8 0000 	str.w	r0, [r8]
				wiegandType = bitCount;
 8001058:	803b      	strh	r3, [r7, #0]
				bitCount = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	8023      	strh	r3, [r4, #0]
				cardTemp = 0;
 800105e:	602b      	str	r3, [r5, #0]
				cardTempHigh = 0;
 8001060:	6033      	str	r3, [r6, #0]
 8001062:	e7d1      	b.n	8001008 <wig_available+0x94>
			lastWiegand = time_wig;
 8001064:	6010      	str	r0, [r2, #0]
			bitCount = 0;
 8001066:	2000      	movs	r0, #0
 8001068:	8018      	strh	r0, [r3, #0]
			cardTemp = 0;
 800106a:	6028      	str	r0, [r5, #0]
			cardTempHigh = 0;
 800106c:	6030      	str	r0, [r6, #0]
			return 0;
 800106e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001072:	bf00      	nop
 8001074:	200000a4 	.word	0x200000a4
 8001078:	20000094 	.word	0x20000094
 800107c:	20000098 	.word	0x20000098
 8001080:	2000009c 	.word	0x2000009c
 8001084:	200000a8 	.word	0x200000a8
 8001088:	200000a0 	.word	0x200000a0

0800108c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800108c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800108e:	e003      	b.n	8001098 <LoopCopyDataInit>

08001090 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001092:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001094:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001096:	3104      	adds	r1, #4

08001098 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001098:	480a      	ldr	r0, [pc, #40]	; (80010c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800109c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800109e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80010a0:	d3f6      	bcc.n	8001090 <CopyDataInit>
  ldr r2, =_sbss
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80010a4:	e002      	b.n	80010ac <LoopFillZerobss>

080010a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80010a8:	f842 3b04 	str.w	r3, [r2], #4

080010ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80010ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80010b0:	d3f9      	bcc.n	80010a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010b2:	f7ff fec1 	bl	8000e38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010b6:	f000 f815 	bl	80010e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ba:	f7ff fdaf 	bl	8000c1c <main>
  bx lr
 80010be:	4770      	bx	lr
  ldr r3, =_sidata
 80010c0:	08001a58 	.word	0x08001a58
  ldr r0, =_sdata
 80010c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80010c8:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80010cc:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 80010d0:	200000fc 	.word	0x200000fc

080010d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010d4:	e7fe      	b.n	80010d4 <ADC1_2_IRQHandler>
	...

080010d8 <__errno>:
 80010d8:	4b01      	ldr	r3, [pc, #4]	; (80010e0 <__errno+0x8>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000010 	.word	0x20000010

080010e4 <__libc_init_array>:
 80010e4:	b570      	push	{r4, r5, r6, lr}
 80010e6:	2500      	movs	r5, #0
 80010e8:	4e0c      	ldr	r6, [pc, #48]	; (800111c <__libc_init_array+0x38>)
 80010ea:	4c0d      	ldr	r4, [pc, #52]	; (8001120 <__libc_init_array+0x3c>)
 80010ec:	1ba4      	subs	r4, r4, r6
 80010ee:	10a4      	asrs	r4, r4, #2
 80010f0:	42a5      	cmp	r5, r4
 80010f2:	d109      	bne.n	8001108 <__libc_init_array+0x24>
 80010f4:	f000 fc5e 	bl	80019b4 <_init>
 80010f8:	2500      	movs	r5, #0
 80010fa:	4e0a      	ldr	r6, [pc, #40]	; (8001124 <__libc_init_array+0x40>)
 80010fc:	4c0a      	ldr	r4, [pc, #40]	; (8001128 <__libc_init_array+0x44>)
 80010fe:	1ba4      	subs	r4, r4, r6
 8001100:	10a4      	asrs	r4, r4, #2
 8001102:	42a5      	cmp	r5, r4
 8001104:	d105      	bne.n	8001112 <__libc_init_array+0x2e>
 8001106:	bd70      	pop	{r4, r5, r6, pc}
 8001108:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800110c:	4798      	blx	r3
 800110e:	3501      	adds	r5, #1
 8001110:	e7ee      	b.n	80010f0 <__libc_init_array+0xc>
 8001112:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001116:	4798      	blx	r3
 8001118:	3501      	adds	r5, #1
 800111a:	e7f2      	b.n	8001102 <__libc_init_array+0x1e>
 800111c:	08001a50 	.word	0x08001a50
 8001120:	08001a50 	.word	0x08001a50
 8001124:	08001a50 	.word	0x08001a50
 8001128:	08001a54 	.word	0x08001a54

0800112c <memset>:
 800112c:	4603      	mov	r3, r0
 800112e:	4402      	add	r2, r0
 8001130:	4293      	cmp	r3, r2
 8001132:	d100      	bne.n	8001136 <memset+0xa>
 8001134:	4770      	bx	lr
 8001136:	f803 1b01 	strb.w	r1, [r3], #1
 800113a:	e7f9      	b.n	8001130 <memset+0x4>

0800113c <sniprintf>:
 800113c:	b40c      	push	{r2, r3}
 800113e:	b530      	push	{r4, r5, lr}
 8001140:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <sniprintf+0x64>)
 8001142:	1e0c      	subs	r4, r1, #0
 8001144:	b09d      	sub	sp, #116	; 0x74
 8001146:	681d      	ldr	r5, [r3, #0]
 8001148:	da08      	bge.n	800115c <sniprintf+0x20>
 800114a:	238b      	movs	r3, #139	; 0x8b
 800114c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001150:	602b      	str	r3, [r5, #0]
 8001152:	b01d      	add	sp, #116	; 0x74
 8001154:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001158:	b002      	add	sp, #8
 800115a:	4770      	bx	lr
 800115c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001160:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001164:	bf0c      	ite	eq
 8001166:	4623      	moveq	r3, r4
 8001168:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800116c:	9304      	str	r3, [sp, #16]
 800116e:	9307      	str	r3, [sp, #28]
 8001170:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001174:	9002      	str	r0, [sp, #8]
 8001176:	9006      	str	r0, [sp, #24]
 8001178:	f8ad 3016 	strh.w	r3, [sp, #22]
 800117c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800117e:	ab21      	add	r3, sp, #132	; 0x84
 8001180:	a902      	add	r1, sp, #8
 8001182:	4628      	mov	r0, r5
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	f000 f869 	bl	800125c <_svfiprintf_r>
 800118a:	1c43      	adds	r3, r0, #1
 800118c:	bfbc      	itt	lt
 800118e:	238b      	movlt	r3, #139	; 0x8b
 8001190:	602b      	strlt	r3, [r5, #0]
 8001192:	2c00      	cmp	r4, #0
 8001194:	d0dd      	beq.n	8001152 <sniprintf+0x16>
 8001196:	2200      	movs	r2, #0
 8001198:	9b02      	ldr	r3, [sp, #8]
 800119a:	701a      	strb	r2, [r3, #0]
 800119c:	e7d9      	b.n	8001152 <sniprintf+0x16>
 800119e:	bf00      	nop
 80011a0:	20000010 	.word	0x20000010

080011a4 <__ssputs_r>:
 80011a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011a8:	688e      	ldr	r6, [r1, #8]
 80011aa:	4682      	mov	sl, r0
 80011ac:	429e      	cmp	r6, r3
 80011ae:	460c      	mov	r4, r1
 80011b0:	4691      	mov	r9, r2
 80011b2:	4698      	mov	r8, r3
 80011b4:	d835      	bhi.n	8001222 <__ssputs_r+0x7e>
 80011b6:	898a      	ldrh	r2, [r1, #12]
 80011b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80011bc:	d031      	beq.n	8001222 <__ssputs_r+0x7e>
 80011be:	2302      	movs	r3, #2
 80011c0:	6825      	ldr	r5, [r4, #0]
 80011c2:	6909      	ldr	r1, [r1, #16]
 80011c4:	1a6f      	subs	r7, r5, r1
 80011c6:	6965      	ldr	r5, [r4, #20]
 80011c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80011cc:	fb95 f5f3 	sdiv	r5, r5, r3
 80011d0:	f108 0301 	add.w	r3, r8, #1
 80011d4:	443b      	add	r3, r7
 80011d6:	429d      	cmp	r5, r3
 80011d8:	bf38      	it	cc
 80011da:	461d      	movcc	r5, r3
 80011dc:	0553      	lsls	r3, r2, #21
 80011de:	d531      	bpl.n	8001244 <__ssputs_r+0xa0>
 80011e0:	4629      	mov	r1, r5
 80011e2:	f000 fb47 	bl	8001874 <_malloc_r>
 80011e6:	4606      	mov	r6, r0
 80011e8:	b950      	cbnz	r0, 8001200 <__ssputs_r+0x5c>
 80011ea:	230c      	movs	r3, #12
 80011ec:	f8ca 3000 	str.w	r3, [sl]
 80011f0:	89a3      	ldrh	r3, [r4, #12]
 80011f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011fa:	81a3      	strh	r3, [r4, #12]
 80011fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001200:	463a      	mov	r2, r7
 8001202:	6921      	ldr	r1, [r4, #16]
 8001204:	f000 fac4 	bl	8001790 <memcpy>
 8001208:	89a3      	ldrh	r3, [r4, #12]
 800120a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800120e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001212:	81a3      	strh	r3, [r4, #12]
 8001214:	6126      	str	r6, [r4, #16]
 8001216:	443e      	add	r6, r7
 8001218:	6026      	str	r6, [r4, #0]
 800121a:	4646      	mov	r6, r8
 800121c:	6165      	str	r5, [r4, #20]
 800121e:	1bed      	subs	r5, r5, r7
 8001220:	60a5      	str	r5, [r4, #8]
 8001222:	4546      	cmp	r6, r8
 8001224:	bf28      	it	cs
 8001226:	4646      	movcs	r6, r8
 8001228:	4649      	mov	r1, r9
 800122a:	4632      	mov	r2, r6
 800122c:	6820      	ldr	r0, [r4, #0]
 800122e:	f000 faba 	bl	80017a6 <memmove>
 8001232:	68a3      	ldr	r3, [r4, #8]
 8001234:	2000      	movs	r0, #0
 8001236:	1b9b      	subs	r3, r3, r6
 8001238:	60a3      	str	r3, [r4, #8]
 800123a:	6823      	ldr	r3, [r4, #0]
 800123c:	441e      	add	r6, r3
 800123e:	6026      	str	r6, [r4, #0]
 8001240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001244:	462a      	mov	r2, r5
 8001246:	f000 fb73 	bl	8001930 <_realloc_r>
 800124a:	4606      	mov	r6, r0
 800124c:	2800      	cmp	r0, #0
 800124e:	d1e1      	bne.n	8001214 <__ssputs_r+0x70>
 8001250:	6921      	ldr	r1, [r4, #16]
 8001252:	4650      	mov	r0, sl
 8001254:	f000 fac2 	bl	80017dc <_free_r>
 8001258:	e7c7      	b.n	80011ea <__ssputs_r+0x46>
	...

0800125c <_svfiprintf_r>:
 800125c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001260:	b09d      	sub	sp, #116	; 0x74
 8001262:	9303      	str	r3, [sp, #12]
 8001264:	898b      	ldrh	r3, [r1, #12]
 8001266:	4680      	mov	r8, r0
 8001268:	061c      	lsls	r4, r3, #24
 800126a:	460d      	mov	r5, r1
 800126c:	4616      	mov	r6, r2
 800126e:	d50f      	bpl.n	8001290 <_svfiprintf_r+0x34>
 8001270:	690b      	ldr	r3, [r1, #16]
 8001272:	b96b      	cbnz	r3, 8001290 <_svfiprintf_r+0x34>
 8001274:	2140      	movs	r1, #64	; 0x40
 8001276:	f000 fafd 	bl	8001874 <_malloc_r>
 800127a:	6028      	str	r0, [r5, #0]
 800127c:	6128      	str	r0, [r5, #16]
 800127e:	b928      	cbnz	r0, 800128c <_svfiprintf_r+0x30>
 8001280:	230c      	movs	r3, #12
 8001282:	f8c8 3000 	str.w	r3, [r8]
 8001286:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800128a:	e0c4      	b.n	8001416 <_svfiprintf_r+0x1ba>
 800128c:	2340      	movs	r3, #64	; 0x40
 800128e:	616b      	str	r3, [r5, #20]
 8001290:	2300      	movs	r3, #0
 8001292:	9309      	str	r3, [sp, #36]	; 0x24
 8001294:	2320      	movs	r3, #32
 8001296:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800129a:	2330      	movs	r3, #48	; 0x30
 800129c:	f04f 0b01 	mov.w	fp, #1
 80012a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80012a4:	4637      	mov	r7, r6
 80012a6:	463c      	mov	r4, r7
 80012a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d13c      	bne.n	800132a <_svfiprintf_r+0xce>
 80012b0:	ebb7 0a06 	subs.w	sl, r7, r6
 80012b4:	d00b      	beq.n	80012ce <_svfiprintf_r+0x72>
 80012b6:	4653      	mov	r3, sl
 80012b8:	4632      	mov	r2, r6
 80012ba:	4629      	mov	r1, r5
 80012bc:	4640      	mov	r0, r8
 80012be:	f7ff ff71 	bl	80011a4 <__ssputs_r>
 80012c2:	3001      	adds	r0, #1
 80012c4:	f000 80a2 	beq.w	800140c <_svfiprintf_r+0x1b0>
 80012c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80012ca:	4453      	add	r3, sl
 80012cc:	9309      	str	r3, [sp, #36]	; 0x24
 80012ce:	783b      	ldrb	r3, [r7, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 809b 	beq.w	800140c <_svfiprintf_r+0x1b0>
 80012d6:	2300      	movs	r3, #0
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012dc:	9304      	str	r3, [sp, #16]
 80012de:	9307      	str	r3, [sp, #28]
 80012e0:	9205      	str	r2, [sp, #20]
 80012e2:	9306      	str	r3, [sp, #24]
 80012e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80012e8:	931a      	str	r3, [sp, #104]	; 0x68
 80012ea:	2205      	movs	r2, #5
 80012ec:	7821      	ldrb	r1, [r4, #0]
 80012ee:	4850      	ldr	r0, [pc, #320]	; (8001430 <_svfiprintf_r+0x1d4>)
 80012f0:	f000 fa40 	bl	8001774 <memchr>
 80012f4:	1c67      	adds	r7, r4, #1
 80012f6:	9b04      	ldr	r3, [sp, #16]
 80012f8:	b9d8      	cbnz	r0, 8001332 <_svfiprintf_r+0xd6>
 80012fa:	06d9      	lsls	r1, r3, #27
 80012fc:	bf44      	itt	mi
 80012fe:	2220      	movmi	r2, #32
 8001300:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001304:	071a      	lsls	r2, r3, #28
 8001306:	bf44      	itt	mi
 8001308:	222b      	movmi	r2, #43	; 0x2b
 800130a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800130e:	7822      	ldrb	r2, [r4, #0]
 8001310:	2a2a      	cmp	r2, #42	; 0x2a
 8001312:	d016      	beq.n	8001342 <_svfiprintf_r+0xe6>
 8001314:	2100      	movs	r1, #0
 8001316:	200a      	movs	r0, #10
 8001318:	9a07      	ldr	r2, [sp, #28]
 800131a:	4627      	mov	r7, r4
 800131c:	783b      	ldrb	r3, [r7, #0]
 800131e:	3401      	adds	r4, #1
 8001320:	3b30      	subs	r3, #48	; 0x30
 8001322:	2b09      	cmp	r3, #9
 8001324:	d950      	bls.n	80013c8 <_svfiprintf_r+0x16c>
 8001326:	b1c9      	cbz	r1, 800135c <_svfiprintf_r+0x100>
 8001328:	e011      	b.n	800134e <_svfiprintf_r+0xf2>
 800132a:	2b25      	cmp	r3, #37	; 0x25
 800132c:	d0c0      	beq.n	80012b0 <_svfiprintf_r+0x54>
 800132e:	4627      	mov	r7, r4
 8001330:	e7b9      	b.n	80012a6 <_svfiprintf_r+0x4a>
 8001332:	4a3f      	ldr	r2, [pc, #252]	; (8001430 <_svfiprintf_r+0x1d4>)
 8001334:	463c      	mov	r4, r7
 8001336:	1a80      	subs	r0, r0, r2
 8001338:	fa0b f000 	lsl.w	r0, fp, r0
 800133c:	4318      	orrs	r0, r3
 800133e:	9004      	str	r0, [sp, #16]
 8001340:	e7d3      	b.n	80012ea <_svfiprintf_r+0x8e>
 8001342:	9a03      	ldr	r2, [sp, #12]
 8001344:	1d11      	adds	r1, r2, #4
 8001346:	6812      	ldr	r2, [r2, #0]
 8001348:	9103      	str	r1, [sp, #12]
 800134a:	2a00      	cmp	r2, #0
 800134c:	db01      	blt.n	8001352 <_svfiprintf_r+0xf6>
 800134e:	9207      	str	r2, [sp, #28]
 8001350:	e004      	b.n	800135c <_svfiprintf_r+0x100>
 8001352:	4252      	negs	r2, r2
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	9207      	str	r2, [sp, #28]
 800135a:	9304      	str	r3, [sp, #16]
 800135c:	783b      	ldrb	r3, [r7, #0]
 800135e:	2b2e      	cmp	r3, #46	; 0x2e
 8001360:	d10d      	bne.n	800137e <_svfiprintf_r+0x122>
 8001362:	787b      	ldrb	r3, [r7, #1]
 8001364:	1c79      	adds	r1, r7, #1
 8001366:	2b2a      	cmp	r3, #42	; 0x2a
 8001368:	d132      	bne.n	80013d0 <_svfiprintf_r+0x174>
 800136a:	9b03      	ldr	r3, [sp, #12]
 800136c:	3702      	adds	r7, #2
 800136e:	1d1a      	adds	r2, r3, #4
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	9203      	str	r2, [sp, #12]
 8001374:	2b00      	cmp	r3, #0
 8001376:	bfb8      	it	lt
 8001378:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800137c:	9305      	str	r3, [sp, #20]
 800137e:	4c2d      	ldr	r4, [pc, #180]	; (8001434 <_svfiprintf_r+0x1d8>)
 8001380:	2203      	movs	r2, #3
 8001382:	7839      	ldrb	r1, [r7, #0]
 8001384:	4620      	mov	r0, r4
 8001386:	f000 f9f5 	bl	8001774 <memchr>
 800138a:	b138      	cbz	r0, 800139c <_svfiprintf_r+0x140>
 800138c:	2340      	movs	r3, #64	; 0x40
 800138e:	1b00      	subs	r0, r0, r4
 8001390:	fa03 f000 	lsl.w	r0, r3, r0
 8001394:	9b04      	ldr	r3, [sp, #16]
 8001396:	3701      	adds	r7, #1
 8001398:	4303      	orrs	r3, r0
 800139a:	9304      	str	r3, [sp, #16]
 800139c:	7839      	ldrb	r1, [r7, #0]
 800139e:	2206      	movs	r2, #6
 80013a0:	4825      	ldr	r0, [pc, #148]	; (8001438 <_svfiprintf_r+0x1dc>)
 80013a2:	1c7e      	adds	r6, r7, #1
 80013a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80013a8:	f000 f9e4 	bl	8001774 <memchr>
 80013ac:	2800      	cmp	r0, #0
 80013ae:	d035      	beq.n	800141c <_svfiprintf_r+0x1c0>
 80013b0:	4b22      	ldr	r3, [pc, #136]	; (800143c <_svfiprintf_r+0x1e0>)
 80013b2:	b9fb      	cbnz	r3, 80013f4 <_svfiprintf_r+0x198>
 80013b4:	9b03      	ldr	r3, [sp, #12]
 80013b6:	3307      	adds	r3, #7
 80013b8:	f023 0307 	bic.w	r3, r3, #7
 80013bc:	3308      	adds	r3, #8
 80013be:	9303      	str	r3, [sp, #12]
 80013c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80013c2:	444b      	add	r3, r9
 80013c4:	9309      	str	r3, [sp, #36]	; 0x24
 80013c6:	e76d      	b.n	80012a4 <_svfiprintf_r+0x48>
 80013c8:	fb00 3202 	mla	r2, r0, r2, r3
 80013cc:	2101      	movs	r1, #1
 80013ce:	e7a4      	b.n	800131a <_svfiprintf_r+0xbe>
 80013d0:	2300      	movs	r3, #0
 80013d2:	240a      	movs	r4, #10
 80013d4:	4618      	mov	r0, r3
 80013d6:	9305      	str	r3, [sp, #20]
 80013d8:	460f      	mov	r7, r1
 80013da:	783a      	ldrb	r2, [r7, #0]
 80013dc:	3101      	adds	r1, #1
 80013de:	3a30      	subs	r2, #48	; 0x30
 80013e0:	2a09      	cmp	r2, #9
 80013e2:	d903      	bls.n	80013ec <_svfiprintf_r+0x190>
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0ca      	beq.n	800137e <_svfiprintf_r+0x122>
 80013e8:	9005      	str	r0, [sp, #20]
 80013ea:	e7c8      	b.n	800137e <_svfiprintf_r+0x122>
 80013ec:	fb04 2000 	mla	r0, r4, r0, r2
 80013f0:	2301      	movs	r3, #1
 80013f2:	e7f1      	b.n	80013d8 <_svfiprintf_r+0x17c>
 80013f4:	ab03      	add	r3, sp, #12
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	462a      	mov	r2, r5
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <_svfiprintf_r+0x1e4>)
 80013fc:	a904      	add	r1, sp, #16
 80013fe:	4640      	mov	r0, r8
 8001400:	f3af 8000 	nop.w
 8001404:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001408:	4681      	mov	r9, r0
 800140a:	d1d9      	bne.n	80013c0 <_svfiprintf_r+0x164>
 800140c:	89ab      	ldrh	r3, [r5, #12]
 800140e:	065b      	lsls	r3, r3, #25
 8001410:	f53f af39 	bmi.w	8001286 <_svfiprintf_r+0x2a>
 8001414:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001416:	b01d      	add	sp, #116	; 0x74
 8001418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800141c:	ab03      	add	r3, sp, #12
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	462a      	mov	r2, r5
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <_svfiprintf_r+0x1e4>)
 8001424:	a904      	add	r1, sp, #16
 8001426:	4640      	mov	r0, r8
 8001428:	f000 f884 	bl	8001534 <_printf_i>
 800142c:	e7ea      	b.n	8001404 <_svfiprintf_r+0x1a8>
 800142e:	bf00      	nop
 8001430:	08001a1c 	.word	0x08001a1c
 8001434:	08001a22 	.word	0x08001a22
 8001438:	08001a26 	.word	0x08001a26
 800143c:	00000000 	.word	0x00000000
 8001440:	080011a5 	.word	0x080011a5

08001444 <_printf_common>:
 8001444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001448:	4691      	mov	r9, r2
 800144a:	461f      	mov	r7, r3
 800144c:	688a      	ldr	r2, [r1, #8]
 800144e:	690b      	ldr	r3, [r1, #16]
 8001450:	4606      	mov	r6, r0
 8001452:	4293      	cmp	r3, r2
 8001454:	bfb8      	it	lt
 8001456:	4613      	movlt	r3, r2
 8001458:	f8c9 3000 	str.w	r3, [r9]
 800145c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001460:	460c      	mov	r4, r1
 8001462:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001466:	b112      	cbz	r2, 800146e <_printf_common+0x2a>
 8001468:	3301      	adds	r3, #1
 800146a:	f8c9 3000 	str.w	r3, [r9]
 800146e:	6823      	ldr	r3, [r4, #0]
 8001470:	0699      	lsls	r1, r3, #26
 8001472:	bf42      	ittt	mi
 8001474:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001478:	3302      	addmi	r3, #2
 800147a:	f8c9 3000 	strmi.w	r3, [r9]
 800147e:	6825      	ldr	r5, [r4, #0]
 8001480:	f015 0506 	ands.w	r5, r5, #6
 8001484:	d107      	bne.n	8001496 <_printf_common+0x52>
 8001486:	f104 0a19 	add.w	sl, r4, #25
 800148a:	68e3      	ldr	r3, [r4, #12]
 800148c:	f8d9 2000 	ldr.w	r2, [r9]
 8001490:	1a9b      	subs	r3, r3, r2
 8001492:	429d      	cmp	r5, r3
 8001494:	db2a      	blt.n	80014ec <_printf_common+0xa8>
 8001496:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800149a:	6822      	ldr	r2, [r4, #0]
 800149c:	3300      	adds	r3, #0
 800149e:	bf18      	it	ne
 80014a0:	2301      	movne	r3, #1
 80014a2:	0692      	lsls	r2, r2, #26
 80014a4:	d42f      	bmi.n	8001506 <_printf_common+0xc2>
 80014a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80014aa:	4639      	mov	r1, r7
 80014ac:	4630      	mov	r0, r6
 80014ae:	47c0      	blx	r8
 80014b0:	3001      	adds	r0, #1
 80014b2:	d022      	beq.n	80014fa <_printf_common+0xb6>
 80014b4:	6823      	ldr	r3, [r4, #0]
 80014b6:	68e5      	ldr	r5, [r4, #12]
 80014b8:	f003 0306 	and.w	r3, r3, #6
 80014bc:	2b04      	cmp	r3, #4
 80014be:	bf18      	it	ne
 80014c0:	2500      	movne	r5, #0
 80014c2:	f8d9 2000 	ldr.w	r2, [r9]
 80014c6:	f04f 0900 	mov.w	r9, #0
 80014ca:	bf08      	it	eq
 80014cc:	1aad      	subeq	r5, r5, r2
 80014ce:	68a3      	ldr	r3, [r4, #8]
 80014d0:	6922      	ldr	r2, [r4, #16]
 80014d2:	bf08      	it	eq
 80014d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80014d8:	4293      	cmp	r3, r2
 80014da:	bfc4      	itt	gt
 80014dc:	1a9b      	subgt	r3, r3, r2
 80014de:	18ed      	addgt	r5, r5, r3
 80014e0:	341a      	adds	r4, #26
 80014e2:	454d      	cmp	r5, r9
 80014e4:	d11b      	bne.n	800151e <_printf_common+0xda>
 80014e6:	2000      	movs	r0, #0
 80014e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014ec:	2301      	movs	r3, #1
 80014ee:	4652      	mov	r2, sl
 80014f0:	4639      	mov	r1, r7
 80014f2:	4630      	mov	r0, r6
 80014f4:	47c0      	blx	r8
 80014f6:	3001      	adds	r0, #1
 80014f8:	d103      	bne.n	8001502 <_printf_common+0xbe>
 80014fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001502:	3501      	adds	r5, #1
 8001504:	e7c1      	b.n	800148a <_printf_common+0x46>
 8001506:	2030      	movs	r0, #48	; 0x30
 8001508:	18e1      	adds	r1, r4, r3
 800150a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001514:	4422      	add	r2, r4
 8001516:	3302      	adds	r3, #2
 8001518:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800151c:	e7c3      	b.n	80014a6 <_printf_common+0x62>
 800151e:	2301      	movs	r3, #1
 8001520:	4622      	mov	r2, r4
 8001522:	4639      	mov	r1, r7
 8001524:	4630      	mov	r0, r6
 8001526:	47c0      	blx	r8
 8001528:	3001      	adds	r0, #1
 800152a:	d0e6      	beq.n	80014fa <_printf_common+0xb6>
 800152c:	f109 0901 	add.w	r9, r9, #1
 8001530:	e7d7      	b.n	80014e2 <_printf_common+0x9e>
	...

08001534 <_printf_i>:
 8001534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001538:	4617      	mov	r7, r2
 800153a:	7e0a      	ldrb	r2, [r1, #24]
 800153c:	b085      	sub	sp, #20
 800153e:	2a6e      	cmp	r2, #110	; 0x6e
 8001540:	4698      	mov	r8, r3
 8001542:	4606      	mov	r6, r0
 8001544:	460c      	mov	r4, r1
 8001546:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001548:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800154c:	f000 80bc 	beq.w	80016c8 <_printf_i+0x194>
 8001550:	d81a      	bhi.n	8001588 <_printf_i+0x54>
 8001552:	2a63      	cmp	r2, #99	; 0x63
 8001554:	d02e      	beq.n	80015b4 <_printf_i+0x80>
 8001556:	d80a      	bhi.n	800156e <_printf_i+0x3a>
 8001558:	2a00      	cmp	r2, #0
 800155a:	f000 80c8 	beq.w	80016ee <_printf_i+0x1ba>
 800155e:	2a58      	cmp	r2, #88	; 0x58
 8001560:	f000 808a 	beq.w	8001678 <_printf_i+0x144>
 8001564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001568:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800156c:	e02a      	b.n	80015c4 <_printf_i+0x90>
 800156e:	2a64      	cmp	r2, #100	; 0x64
 8001570:	d001      	beq.n	8001576 <_printf_i+0x42>
 8001572:	2a69      	cmp	r2, #105	; 0x69
 8001574:	d1f6      	bne.n	8001564 <_printf_i+0x30>
 8001576:	6821      	ldr	r1, [r4, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800157e:	d023      	beq.n	80015c8 <_printf_i+0x94>
 8001580:	1d11      	adds	r1, r2, #4
 8001582:	6019      	str	r1, [r3, #0]
 8001584:	6813      	ldr	r3, [r2, #0]
 8001586:	e027      	b.n	80015d8 <_printf_i+0xa4>
 8001588:	2a73      	cmp	r2, #115	; 0x73
 800158a:	f000 80b4 	beq.w	80016f6 <_printf_i+0x1c2>
 800158e:	d808      	bhi.n	80015a2 <_printf_i+0x6e>
 8001590:	2a6f      	cmp	r2, #111	; 0x6f
 8001592:	d02a      	beq.n	80015ea <_printf_i+0xb6>
 8001594:	2a70      	cmp	r2, #112	; 0x70
 8001596:	d1e5      	bne.n	8001564 <_printf_i+0x30>
 8001598:	680a      	ldr	r2, [r1, #0]
 800159a:	f042 0220 	orr.w	r2, r2, #32
 800159e:	600a      	str	r2, [r1, #0]
 80015a0:	e003      	b.n	80015aa <_printf_i+0x76>
 80015a2:	2a75      	cmp	r2, #117	; 0x75
 80015a4:	d021      	beq.n	80015ea <_printf_i+0xb6>
 80015a6:	2a78      	cmp	r2, #120	; 0x78
 80015a8:	d1dc      	bne.n	8001564 <_printf_i+0x30>
 80015aa:	2278      	movs	r2, #120	; 0x78
 80015ac:	496f      	ldr	r1, [pc, #444]	; (800176c <_printf_i+0x238>)
 80015ae:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80015b2:	e064      	b.n	800167e <_printf_i+0x14a>
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80015ba:	1d11      	adds	r1, r2, #4
 80015bc:	6019      	str	r1, [r3, #0]
 80015be:	6813      	ldr	r3, [r2, #0]
 80015c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80015c4:	2301      	movs	r3, #1
 80015c6:	e0a3      	b.n	8001710 <_printf_i+0x1dc>
 80015c8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80015cc:	f102 0104 	add.w	r1, r2, #4
 80015d0:	6019      	str	r1, [r3, #0]
 80015d2:	d0d7      	beq.n	8001584 <_printf_i+0x50>
 80015d4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	da03      	bge.n	80015e4 <_printf_i+0xb0>
 80015dc:	222d      	movs	r2, #45	; 0x2d
 80015de:	425b      	negs	r3, r3
 80015e0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80015e4:	4962      	ldr	r1, [pc, #392]	; (8001770 <_printf_i+0x23c>)
 80015e6:	220a      	movs	r2, #10
 80015e8:	e017      	b.n	800161a <_printf_i+0xe6>
 80015ea:	6820      	ldr	r0, [r4, #0]
 80015ec:	6819      	ldr	r1, [r3, #0]
 80015ee:	f010 0f80 	tst.w	r0, #128	; 0x80
 80015f2:	d003      	beq.n	80015fc <_printf_i+0xc8>
 80015f4:	1d08      	adds	r0, r1, #4
 80015f6:	6018      	str	r0, [r3, #0]
 80015f8:	680b      	ldr	r3, [r1, #0]
 80015fa:	e006      	b.n	800160a <_printf_i+0xd6>
 80015fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001600:	f101 0004 	add.w	r0, r1, #4
 8001604:	6018      	str	r0, [r3, #0]
 8001606:	d0f7      	beq.n	80015f8 <_printf_i+0xc4>
 8001608:	880b      	ldrh	r3, [r1, #0]
 800160a:	2a6f      	cmp	r2, #111	; 0x6f
 800160c:	bf14      	ite	ne
 800160e:	220a      	movne	r2, #10
 8001610:	2208      	moveq	r2, #8
 8001612:	4957      	ldr	r1, [pc, #348]	; (8001770 <_printf_i+0x23c>)
 8001614:	2000      	movs	r0, #0
 8001616:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800161a:	6865      	ldr	r5, [r4, #4]
 800161c:	2d00      	cmp	r5, #0
 800161e:	60a5      	str	r5, [r4, #8]
 8001620:	f2c0 809c 	blt.w	800175c <_printf_i+0x228>
 8001624:	6820      	ldr	r0, [r4, #0]
 8001626:	f020 0004 	bic.w	r0, r0, #4
 800162a:	6020      	str	r0, [r4, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d13f      	bne.n	80016b0 <_printf_i+0x17c>
 8001630:	2d00      	cmp	r5, #0
 8001632:	f040 8095 	bne.w	8001760 <_printf_i+0x22c>
 8001636:	4675      	mov	r5, lr
 8001638:	2a08      	cmp	r2, #8
 800163a:	d10b      	bne.n	8001654 <_printf_i+0x120>
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	07da      	lsls	r2, r3, #31
 8001640:	d508      	bpl.n	8001654 <_printf_i+0x120>
 8001642:	6923      	ldr	r3, [r4, #16]
 8001644:	6862      	ldr	r2, [r4, #4]
 8001646:	429a      	cmp	r2, r3
 8001648:	bfde      	ittt	le
 800164a:	2330      	movle	r3, #48	; 0x30
 800164c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001650:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001654:	ebae 0305 	sub.w	r3, lr, r5
 8001658:	6123      	str	r3, [r4, #16]
 800165a:	f8cd 8000 	str.w	r8, [sp]
 800165e:	463b      	mov	r3, r7
 8001660:	aa03      	add	r2, sp, #12
 8001662:	4621      	mov	r1, r4
 8001664:	4630      	mov	r0, r6
 8001666:	f7ff feed 	bl	8001444 <_printf_common>
 800166a:	3001      	adds	r0, #1
 800166c:	d155      	bne.n	800171a <_printf_i+0x1e6>
 800166e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001672:	b005      	add	sp, #20
 8001674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001678:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800167c:	493c      	ldr	r1, [pc, #240]	; (8001770 <_printf_i+0x23c>)
 800167e:	6822      	ldr	r2, [r4, #0]
 8001680:	6818      	ldr	r0, [r3, #0]
 8001682:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001686:	f100 0504 	add.w	r5, r0, #4
 800168a:	601d      	str	r5, [r3, #0]
 800168c:	d001      	beq.n	8001692 <_printf_i+0x15e>
 800168e:	6803      	ldr	r3, [r0, #0]
 8001690:	e002      	b.n	8001698 <_printf_i+0x164>
 8001692:	0655      	lsls	r5, r2, #25
 8001694:	d5fb      	bpl.n	800168e <_printf_i+0x15a>
 8001696:	8803      	ldrh	r3, [r0, #0]
 8001698:	07d0      	lsls	r0, r2, #31
 800169a:	bf44      	itt	mi
 800169c:	f042 0220 	orrmi.w	r2, r2, #32
 80016a0:	6022      	strmi	r2, [r4, #0]
 80016a2:	b91b      	cbnz	r3, 80016ac <_printf_i+0x178>
 80016a4:	6822      	ldr	r2, [r4, #0]
 80016a6:	f022 0220 	bic.w	r2, r2, #32
 80016aa:	6022      	str	r2, [r4, #0]
 80016ac:	2210      	movs	r2, #16
 80016ae:	e7b1      	b.n	8001614 <_printf_i+0xe0>
 80016b0:	4675      	mov	r5, lr
 80016b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80016b6:	fb02 3310 	mls	r3, r2, r0, r3
 80016ba:	5ccb      	ldrb	r3, [r1, r3]
 80016bc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80016c0:	4603      	mov	r3, r0
 80016c2:	2800      	cmp	r0, #0
 80016c4:	d1f5      	bne.n	80016b2 <_printf_i+0x17e>
 80016c6:	e7b7      	b.n	8001638 <_printf_i+0x104>
 80016c8:	6808      	ldr	r0, [r1, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	f010 0f80 	tst.w	r0, #128	; 0x80
 80016d0:	6949      	ldr	r1, [r1, #20]
 80016d2:	d004      	beq.n	80016de <_printf_i+0x1aa>
 80016d4:	1d10      	adds	r0, r2, #4
 80016d6:	6018      	str	r0, [r3, #0]
 80016d8:	6813      	ldr	r3, [r2, #0]
 80016da:	6019      	str	r1, [r3, #0]
 80016dc:	e007      	b.n	80016ee <_printf_i+0x1ba>
 80016de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80016e2:	f102 0004 	add.w	r0, r2, #4
 80016e6:	6018      	str	r0, [r3, #0]
 80016e8:	6813      	ldr	r3, [r2, #0]
 80016ea:	d0f6      	beq.n	80016da <_printf_i+0x1a6>
 80016ec:	8019      	strh	r1, [r3, #0]
 80016ee:	2300      	movs	r3, #0
 80016f0:	4675      	mov	r5, lr
 80016f2:	6123      	str	r3, [r4, #16]
 80016f4:	e7b1      	b.n	800165a <_printf_i+0x126>
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	1d11      	adds	r1, r2, #4
 80016fa:	6019      	str	r1, [r3, #0]
 80016fc:	6815      	ldr	r5, [r2, #0]
 80016fe:	2100      	movs	r1, #0
 8001700:	6862      	ldr	r2, [r4, #4]
 8001702:	4628      	mov	r0, r5
 8001704:	f000 f836 	bl	8001774 <memchr>
 8001708:	b108      	cbz	r0, 800170e <_printf_i+0x1da>
 800170a:	1b40      	subs	r0, r0, r5
 800170c:	6060      	str	r0, [r4, #4]
 800170e:	6863      	ldr	r3, [r4, #4]
 8001710:	6123      	str	r3, [r4, #16]
 8001712:	2300      	movs	r3, #0
 8001714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001718:	e79f      	b.n	800165a <_printf_i+0x126>
 800171a:	6923      	ldr	r3, [r4, #16]
 800171c:	462a      	mov	r2, r5
 800171e:	4639      	mov	r1, r7
 8001720:	4630      	mov	r0, r6
 8001722:	47c0      	blx	r8
 8001724:	3001      	adds	r0, #1
 8001726:	d0a2      	beq.n	800166e <_printf_i+0x13a>
 8001728:	6823      	ldr	r3, [r4, #0]
 800172a:	079b      	lsls	r3, r3, #30
 800172c:	d507      	bpl.n	800173e <_printf_i+0x20a>
 800172e:	2500      	movs	r5, #0
 8001730:	f104 0919 	add.w	r9, r4, #25
 8001734:	68e3      	ldr	r3, [r4, #12]
 8001736:	9a03      	ldr	r2, [sp, #12]
 8001738:	1a9b      	subs	r3, r3, r2
 800173a:	429d      	cmp	r5, r3
 800173c:	db05      	blt.n	800174a <_printf_i+0x216>
 800173e:	68e0      	ldr	r0, [r4, #12]
 8001740:	9b03      	ldr	r3, [sp, #12]
 8001742:	4298      	cmp	r0, r3
 8001744:	bfb8      	it	lt
 8001746:	4618      	movlt	r0, r3
 8001748:	e793      	b.n	8001672 <_printf_i+0x13e>
 800174a:	2301      	movs	r3, #1
 800174c:	464a      	mov	r2, r9
 800174e:	4639      	mov	r1, r7
 8001750:	4630      	mov	r0, r6
 8001752:	47c0      	blx	r8
 8001754:	3001      	adds	r0, #1
 8001756:	d08a      	beq.n	800166e <_printf_i+0x13a>
 8001758:	3501      	adds	r5, #1
 800175a:	e7eb      	b.n	8001734 <_printf_i+0x200>
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1a7      	bne.n	80016b0 <_printf_i+0x17c>
 8001760:	780b      	ldrb	r3, [r1, #0]
 8001762:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001766:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800176a:	e765      	b.n	8001638 <_printf_i+0x104>
 800176c:	08001a3e 	.word	0x08001a3e
 8001770:	08001a2d 	.word	0x08001a2d

08001774 <memchr>:
 8001774:	b510      	push	{r4, lr}
 8001776:	b2c9      	uxtb	r1, r1
 8001778:	4402      	add	r2, r0
 800177a:	4290      	cmp	r0, r2
 800177c:	4603      	mov	r3, r0
 800177e:	d101      	bne.n	8001784 <memchr+0x10>
 8001780:	2000      	movs	r0, #0
 8001782:	bd10      	pop	{r4, pc}
 8001784:	781c      	ldrb	r4, [r3, #0]
 8001786:	3001      	adds	r0, #1
 8001788:	428c      	cmp	r4, r1
 800178a:	d1f6      	bne.n	800177a <memchr+0x6>
 800178c:	4618      	mov	r0, r3
 800178e:	bd10      	pop	{r4, pc}

08001790 <memcpy>:
 8001790:	b510      	push	{r4, lr}
 8001792:	1e43      	subs	r3, r0, #1
 8001794:	440a      	add	r2, r1
 8001796:	4291      	cmp	r1, r2
 8001798:	d100      	bne.n	800179c <memcpy+0xc>
 800179a:	bd10      	pop	{r4, pc}
 800179c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80017a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80017a4:	e7f7      	b.n	8001796 <memcpy+0x6>

080017a6 <memmove>:
 80017a6:	4288      	cmp	r0, r1
 80017a8:	b510      	push	{r4, lr}
 80017aa:	eb01 0302 	add.w	r3, r1, r2
 80017ae:	d803      	bhi.n	80017b8 <memmove+0x12>
 80017b0:	1e42      	subs	r2, r0, #1
 80017b2:	4299      	cmp	r1, r3
 80017b4:	d10c      	bne.n	80017d0 <memmove+0x2a>
 80017b6:	bd10      	pop	{r4, pc}
 80017b8:	4298      	cmp	r0, r3
 80017ba:	d2f9      	bcs.n	80017b0 <memmove+0xa>
 80017bc:	1881      	adds	r1, r0, r2
 80017be:	1ad2      	subs	r2, r2, r3
 80017c0:	42d3      	cmn	r3, r2
 80017c2:	d100      	bne.n	80017c6 <memmove+0x20>
 80017c4:	bd10      	pop	{r4, pc}
 80017c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80017ca:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80017ce:	e7f7      	b.n	80017c0 <memmove+0x1a>
 80017d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80017d4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80017d8:	e7eb      	b.n	80017b2 <memmove+0xc>
	...

080017dc <_free_r>:
 80017dc:	b538      	push	{r3, r4, r5, lr}
 80017de:	4605      	mov	r5, r0
 80017e0:	2900      	cmp	r1, #0
 80017e2:	d043      	beq.n	800186c <_free_r+0x90>
 80017e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80017e8:	1f0c      	subs	r4, r1, #4
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	bfb8      	it	lt
 80017ee:	18e4      	addlt	r4, r4, r3
 80017f0:	f000 f8d4 	bl	800199c <__malloc_lock>
 80017f4:	4a1e      	ldr	r2, [pc, #120]	; (8001870 <_free_r+0x94>)
 80017f6:	6813      	ldr	r3, [r2, #0]
 80017f8:	4610      	mov	r0, r2
 80017fa:	b933      	cbnz	r3, 800180a <_free_r+0x2e>
 80017fc:	6063      	str	r3, [r4, #4]
 80017fe:	6014      	str	r4, [r2, #0]
 8001800:	4628      	mov	r0, r5
 8001802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001806:	f000 b8ca 	b.w	800199e <__malloc_unlock>
 800180a:	42a3      	cmp	r3, r4
 800180c:	d90b      	bls.n	8001826 <_free_r+0x4a>
 800180e:	6821      	ldr	r1, [r4, #0]
 8001810:	1862      	adds	r2, r4, r1
 8001812:	4293      	cmp	r3, r2
 8001814:	bf01      	itttt	eq
 8001816:	681a      	ldreq	r2, [r3, #0]
 8001818:	685b      	ldreq	r3, [r3, #4]
 800181a:	1852      	addeq	r2, r2, r1
 800181c:	6022      	streq	r2, [r4, #0]
 800181e:	6063      	str	r3, [r4, #4]
 8001820:	6004      	str	r4, [r0, #0]
 8001822:	e7ed      	b.n	8001800 <_free_r+0x24>
 8001824:	4613      	mov	r3, r2
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	b10a      	cbz	r2, 800182e <_free_r+0x52>
 800182a:	42a2      	cmp	r2, r4
 800182c:	d9fa      	bls.n	8001824 <_free_r+0x48>
 800182e:	6819      	ldr	r1, [r3, #0]
 8001830:	1858      	adds	r0, r3, r1
 8001832:	42a0      	cmp	r0, r4
 8001834:	d10b      	bne.n	800184e <_free_r+0x72>
 8001836:	6820      	ldr	r0, [r4, #0]
 8001838:	4401      	add	r1, r0
 800183a:	1858      	adds	r0, r3, r1
 800183c:	4282      	cmp	r2, r0
 800183e:	6019      	str	r1, [r3, #0]
 8001840:	d1de      	bne.n	8001800 <_free_r+0x24>
 8001842:	6810      	ldr	r0, [r2, #0]
 8001844:	6852      	ldr	r2, [r2, #4]
 8001846:	4401      	add	r1, r0
 8001848:	6019      	str	r1, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	e7d8      	b.n	8001800 <_free_r+0x24>
 800184e:	d902      	bls.n	8001856 <_free_r+0x7a>
 8001850:	230c      	movs	r3, #12
 8001852:	602b      	str	r3, [r5, #0]
 8001854:	e7d4      	b.n	8001800 <_free_r+0x24>
 8001856:	6820      	ldr	r0, [r4, #0]
 8001858:	1821      	adds	r1, r4, r0
 800185a:	428a      	cmp	r2, r1
 800185c:	bf01      	itttt	eq
 800185e:	6811      	ldreq	r1, [r2, #0]
 8001860:	6852      	ldreq	r2, [r2, #4]
 8001862:	1809      	addeq	r1, r1, r0
 8001864:	6021      	streq	r1, [r4, #0]
 8001866:	6062      	str	r2, [r4, #4]
 8001868:	605c      	str	r4, [r3, #4]
 800186a:	e7c9      	b.n	8001800 <_free_r+0x24>
 800186c:	bd38      	pop	{r3, r4, r5, pc}
 800186e:	bf00      	nop
 8001870:	200000ac 	.word	0x200000ac

08001874 <_malloc_r>:
 8001874:	b570      	push	{r4, r5, r6, lr}
 8001876:	1ccd      	adds	r5, r1, #3
 8001878:	f025 0503 	bic.w	r5, r5, #3
 800187c:	3508      	adds	r5, #8
 800187e:	2d0c      	cmp	r5, #12
 8001880:	bf38      	it	cc
 8001882:	250c      	movcc	r5, #12
 8001884:	2d00      	cmp	r5, #0
 8001886:	4606      	mov	r6, r0
 8001888:	db01      	blt.n	800188e <_malloc_r+0x1a>
 800188a:	42a9      	cmp	r1, r5
 800188c:	d903      	bls.n	8001896 <_malloc_r+0x22>
 800188e:	230c      	movs	r3, #12
 8001890:	6033      	str	r3, [r6, #0]
 8001892:	2000      	movs	r0, #0
 8001894:	bd70      	pop	{r4, r5, r6, pc}
 8001896:	f000 f881 	bl	800199c <__malloc_lock>
 800189a:	4a23      	ldr	r2, [pc, #140]	; (8001928 <_malloc_r+0xb4>)
 800189c:	6814      	ldr	r4, [r2, #0]
 800189e:	4621      	mov	r1, r4
 80018a0:	b991      	cbnz	r1, 80018c8 <_malloc_r+0x54>
 80018a2:	4c22      	ldr	r4, [pc, #136]	; (800192c <_malloc_r+0xb8>)
 80018a4:	6823      	ldr	r3, [r4, #0]
 80018a6:	b91b      	cbnz	r3, 80018b0 <_malloc_r+0x3c>
 80018a8:	4630      	mov	r0, r6
 80018aa:	f000 f867 	bl	800197c <_sbrk_r>
 80018ae:	6020      	str	r0, [r4, #0]
 80018b0:	4629      	mov	r1, r5
 80018b2:	4630      	mov	r0, r6
 80018b4:	f000 f862 	bl	800197c <_sbrk_r>
 80018b8:	1c43      	adds	r3, r0, #1
 80018ba:	d126      	bne.n	800190a <_malloc_r+0x96>
 80018bc:	230c      	movs	r3, #12
 80018be:	4630      	mov	r0, r6
 80018c0:	6033      	str	r3, [r6, #0]
 80018c2:	f000 f86c 	bl	800199e <__malloc_unlock>
 80018c6:	e7e4      	b.n	8001892 <_malloc_r+0x1e>
 80018c8:	680b      	ldr	r3, [r1, #0]
 80018ca:	1b5b      	subs	r3, r3, r5
 80018cc:	d41a      	bmi.n	8001904 <_malloc_r+0x90>
 80018ce:	2b0b      	cmp	r3, #11
 80018d0:	d90f      	bls.n	80018f2 <_malloc_r+0x7e>
 80018d2:	600b      	str	r3, [r1, #0]
 80018d4:	18cc      	adds	r4, r1, r3
 80018d6:	50cd      	str	r5, [r1, r3]
 80018d8:	4630      	mov	r0, r6
 80018da:	f000 f860 	bl	800199e <__malloc_unlock>
 80018de:	f104 000b 	add.w	r0, r4, #11
 80018e2:	1d23      	adds	r3, r4, #4
 80018e4:	f020 0007 	bic.w	r0, r0, #7
 80018e8:	1ac3      	subs	r3, r0, r3
 80018ea:	d01b      	beq.n	8001924 <_malloc_r+0xb0>
 80018ec:	425a      	negs	r2, r3
 80018ee:	50e2      	str	r2, [r4, r3]
 80018f0:	bd70      	pop	{r4, r5, r6, pc}
 80018f2:	428c      	cmp	r4, r1
 80018f4:	bf0b      	itete	eq
 80018f6:	6863      	ldreq	r3, [r4, #4]
 80018f8:	684b      	ldrne	r3, [r1, #4]
 80018fa:	6013      	streq	r3, [r2, #0]
 80018fc:	6063      	strne	r3, [r4, #4]
 80018fe:	bf18      	it	ne
 8001900:	460c      	movne	r4, r1
 8001902:	e7e9      	b.n	80018d8 <_malloc_r+0x64>
 8001904:	460c      	mov	r4, r1
 8001906:	6849      	ldr	r1, [r1, #4]
 8001908:	e7ca      	b.n	80018a0 <_malloc_r+0x2c>
 800190a:	1cc4      	adds	r4, r0, #3
 800190c:	f024 0403 	bic.w	r4, r4, #3
 8001910:	42a0      	cmp	r0, r4
 8001912:	d005      	beq.n	8001920 <_malloc_r+0xac>
 8001914:	1a21      	subs	r1, r4, r0
 8001916:	4630      	mov	r0, r6
 8001918:	f000 f830 	bl	800197c <_sbrk_r>
 800191c:	3001      	adds	r0, #1
 800191e:	d0cd      	beq.n	80018bc <_malloc_r+0x48>
 8001920:	6025      	str	r5, [r4, #0]
 8001922:	e7d9      	b.n	80018d8 <_malloc_r+0x64>
 8001924:	bd70      	pop	{r4, r5, r6, pc}
 8001926:	bf00      	nop
 8001928:	200000ac 	.word	0x200000ac
 800192c:	200000b0 	.word	0x200000b0

08001930 <_realloc_r>:
 8001930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001932:	4607      	mov	r7, r0
 8001934:	4614      	mov	r4, r2
 8001936:	460e      	mov	r6, r1
 8001938:	b921      	cbnz	r1, 8001944 <_realloc_r+0x14>
 800193a:	4611      	mov	r1, r2
 800193c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001940:	f7ff bf98 	b.w	8001874 <_malloc_r>
 8001944:	b922      	cbnz	r2, 8001950 <_realloc_r+0x20>
 8001946:	f7ff ff49 	bl	80017dc <_free_r>
 800194a:	4625      	mov	r5, r4
 800194c:	4628      	mov	r0, r5
 800194e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001950:	f000 f826 	bl	80019a0 <_malloc_usable_size_r>
 8001954:	4284      	cmp	r4, r0
 8001956:	d90f      	bls.n	8001978 <_realloc_r+0x48>
 8001958:	4621      	mov	r1, r4
 800195a:	4638      	mov	r0, r7
 800195c:	f7ff ff8a 	bl	8001874 <_malloc_r>
 8001960:	4605      	mov	r5, r0
 8001962:	2800      	cmp	r0, #0
 8001964:	d0f2      	beq.n	800194c <_realloc_r+0x1c>
 8001966:	4631      	mov	r1, r6
 8001968:	4622      	mov	r2, r4
 800196a:	f7ff ff11 	bl	8001790 <memcpy>
 800196e:	4631      	mov	r1, r6
 8001970:	4638      	mov	r0, r7
 8001972:	f7ff ff33 	bl	80017dc <_free_r>
 8001976:	e7e9      	b.n	800194c <_realloc_r+0x1c>
 8001978:	4635      	mov	r5, r6
 800197a:	e7e7      	b.n	800194c <_realloc_r+0x1c>

0800197c <_sbrk_r>:
 800197c:	b538      	push	{r3, r4, r5, lr}
 800197e:	2300      	movs	r3, #0
 8001980:	4c05      	ldr	r4, [pc, #20]	; (8001998 <_sbrk_r+0x1c>)
 8001982:	4605      	mov	r5, r0
 8001984:	4608      	mov	r0, r1
 8001986:	6023      	str	r3, [r4, #0]
 8001988:	f7ff fa3c 	bl	8000e04 <_sbrk>
 800198c:	1c43      	adds	r3, r0, #1
 800198e:	d102      	bne.n	8001996 <_sbrk_r+0x1a>
 8001990:	6823      	ldr	r3, [r4, #0]
 8001992:	b103      	cbz	r3, 8001996 <_sbrk_r+0x1a>
 8001994:	602b      	str	r3, [r5, #0]
 8001996:	bd38      	pop	{r3, r4, r5, pc}
 8001998:	200000f8 	.word	0x200000f8

0800199c <__malloc_lock>:
 800199c:	4770      	bx	lr

0800199e <__malloc_unlock>:
 800199e:	4770      	bx	lr

080019a0 <_malloc_usable_size_r>:
 80019a0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80019a4:	2800      	cmp	r0, #0
 80019a6:	f1a0 0004 	sub.w	r0, r0, #4
 80019aa:	bfbc      	itt	lt
 80019ac:	580b      	ldrlt	r3, [r1, r0]
 80019ae:	18c0      	addlt	r0, r0, r3
 80019b0:	4770      	bx	lr
	...

080019b4 <_init>:
 80019b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019b6:	bf00      	nop
 80019b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ba:	bc08      	pop	{r3}
 80019bc:	469e      	mov	lr, r3
 80019be:	4770      	bx	lr

080019c0 <_fini>:
 80019c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c2:	bf00      	nop
 80019c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019c6:	bc08      	pop	{r3}
 80019c8:	469e      	mov	lr, r3
 80019ca:	4770      	bx	lr
